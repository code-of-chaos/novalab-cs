@using NovaLab.ApiClient.Api
@using NovaLab.ApiClient.Model
@using NovaLab.RazorLib.Lib
@using Serilog

@inherits ComponentBase

@inject HttpClient Http
@inject ILogger logger
@inject NavigationManager NavigationManager
@inject UserAccessor UserAccessor

@attribute [StreamRendering]

<Row>
    <Column ColumnSize="ColumnSize.Is2">
        <Button Color="Color.Primary" @onclick="OnClickCallback">Refresh Twitch Access Token</Button>
    </Column>
    <Column ColumnSize="ColumnSize.Is1" Style="display: flex">
        <IconLoadingState State="@_iconState"></IconLoadingState>
    </Column>
</Row>

@code {
    public required string UserId { get; set; }

    private IconLoadingState.StateEnum _iconState = IconLoadingState.StateEnum.Undefined;
    
    private AccessTokenApi? _accessTokenApiCache;
    private AccessTokenApi AccessTokenApi => _accessTokenApiCache ??= new AccessTokenApi(NavigationManager.BaseUri);


    // -----------------------------------------------------------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------------------------------------------------------
    private async Task OnClickCallback() {
        try {
            _iconState = IconLoadingState.StateEnum.Loading;
            ApiResult result = await AccessTokenApi.RefreshTokensAsync((await UserAccessor.GetUserAsync())?.Id);
            _iconState = result.Status == HttpStatusCode.NUMBER_205
                ? IconLoadingState.StateEnum.Success
                : IconLoadingState.StateEnum.Failure;
        }
        catch (Exception e) {
            logger.Error(e, "An Exception occured");
            _iconState = IconLoadingState.StateEnum.Failure;
        }
    }
}