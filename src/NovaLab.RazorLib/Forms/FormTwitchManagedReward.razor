@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using NovaLab.ApiClient.Api
@using NovaLab.RazorLib.BlazoriseExtensions
@using Serilog
@using  NovaLab.ApiClient.Model
@using ApplicationUser = NovaLab.Data.NovaLabUser
@using CreateCustomRewardsRequest = TwitchLib.Api.Helix.Models.ChannelPoints.CreateCustomReward.CreateCustomRewardsRequest

@attribute [StreamRendering]

@inject HttpClient HttpClient
@inject ILogger logger
@inject NavigationManager NavigationManager
@inject IMessageService MessageService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<Row>
    <Column>
        <Validations @ref="@(ValidationsRef)" Mode="ValidationMode.Auto" Model="@CreateCustomRewardsRequestModel" ValidateOnLoad="false" StatusChanged="@ValidationChanged">
            <Fields>
                <ValidatedTextEditFormField 
                    FieldLabel="@("Reward's Title")"
                    Validator="@ValidationRule.IsNotEmpty" 
                    @bind-BindValue="@CreateCustomRewardsRequestModel.Title"
                    SizeColumn="@ColumnSize.IsAuto"
                />

                <ValidatedNumericEditFormField
                    FieldLabel="@("Channel Points Cost")"
                    Validator="@ValidationRuleExtensions.IsIntPositiveNonZero"
                    @bind-BindValue="@CreateCustomRewardsRequestModel.Cost"
                    SizeColumn="@ColumnSize.IsAuto"
                />

            </Fields>
        </Validations>

        <Button Color="Color.Primary" Clicked="@OnSaveClicked" Disabled="@ValidationFailed">
            Validate and Submit
        </Button>


    </Column>
</Row>


@code {
    Validations ValidationsRef { get; set; } = null!;

    CreateCustomRewardsRequest CreateCustomRewardsRequestModel { get; } = new();
    
    private bool ValidationFailed { get; set; }

    private TwitchManagedRewardApi? _rewardApiCache;
    private TwitchManagedRewardApi RewardApi => _rewardApiCache ??= new TwitchManagedRewardApi(NavigationManager.BaseUri);

    
    // -----------------------------------------------------------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------------------------------------------------------
    private Task ValidationChanged(ValidationsStatusChangedEventArgs args) {  
        ValidationFailed = args.Status != ValidationStatus.Success;
        return Task.CompletedTask;
    }
    private async Task OnSaveClicked() {
        // if (ValidationsRef is null) {
        //     logger.Error("ValidationsRef was null");
        //     return;
        // }
        
        if (!await ValidationsRef.ValidateAll() ) {
            logger.Warning("Some fields were not validated correctly");
            return;
        }
        logger.Information( "Thank you for filling the form." );
        
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string userName = authState.User.Identity!.Name!;
        ApplicationUser? user = await UserManager.FindByNameAsync(userName);
        string userId = user!.Id;
        
        logger.Warning("client {@e}", CreateCustomRewardsRequestModel);

        var response = await RewardApi.PostManagedRewardAsync(userId, new ApiClient.Model.CreateCustomRewardsRequest(){
            Title = CreateCustomRewardsRequestModel.Title,
            Prompt = CreateCustomRewardsRequestModel.Prompt,
            Cost = CreateCustomRewardsRequestModel.Cost,
            IsEnabled = CreateCustomRewardsRequestModel.IsEnabled,
            BackgroundColor = CreateCustomRewardsRequestModel.BackgroundColor,
            IsUserInputRequired = CreateCustomRewardsRequestModel.IsUserInputRequired,
            IsMaxPerStreamEnabled = CreateCustomRewardsRequestModel.IsMaxPerStreamEnabled,
            MaxPerStream = CreateCustomRewardsRequestModel.MaxPerStream,
            IsMaxPerUserPerStreamEnabled = CreateCustomRewardsRequestModel.IsMaxPerUserPerStreamEnabled,
            MaxPerUserPerStream = CreateCustomRewardsRequestModel.MaxPerUserPerStream,
            IsGlobalCooldownEnabled = CreateCustomRewardsRequestModel.IsGlobalCooldownEnabled,
            GlobalCooldownSeconds = CreateCustomRewardsRequestModel.GlobalCooldownSeconds,
            ShouldRedemptionsSkipRequestQueue = CreateCustomRewardsRequestModel.ShouldRedemptionsSkipRequestQueue,
        });
        if (response.Status == HttpStatusCode.NUMBER_200) {
            await ValidationsRef.ClearAll();
        }

    }

}
