@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using NovaLab.ApiClient.Api
@using NovaLab.RazorLib.BlazoriseExtensions
@using Serilog
@using  NovaLab.ApiClient.Model
@using NovaLab.RazorLib.Lib
@using ApplicationUser = NovaLab.Data.NovaLabUser

@attribute [StreamRendering]

@inject HttpClient HttpClient
@inject ILogger logger
@inject NavigationManager NavigationManager
@inject IMessageService MessageService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserAccessor UserAccessor

<Row>
    <Column>
        <Validations @ref="@(ValidationsRefRequest)" Mode="ValidationMode.Auto" Model="@CreateNewRewardModel" ValidateOnLoad="false" StatusChanged="@ValidationChanged">
            <Fields>
                <ValidatedTextEditFormField 
                    FieldLabel="@("Reward's Title")"
                    Validator="@ValidationRule.IsNotEmpty" 
                    @bind-BindValue="@CreateNewRewardModel.TwitchApiRequest.Title"
                    SizeColumn="@ColumnSize.IsAuto"
                />

                <ValidatedNumericEditFormField
                    FieldLabel="@("Channel Points Cost")"
                    Validator="@ValidationRuleExtensions.IsIntPositiveNonZero"
                    @bind-BindValue="@CreateNewRewardModel.TwitchApiRequest.Cost"
                    SizeColumn="@ColumnSize.IsAuto"
                />
            </Fields>
        </Validations>

    </Column>
    <Column>
        <Validations @ref="@(ValidationsRefMessageTemplates)" Mode="ValidationMode.Auto" Model="@CreateNewRewardModel" ValidateOnLoad="false" StatusChanged="@ValidationChanged">
            <Fields>
                <ValidatedMemoEditFormField
                    FieldLabel="Full Message Template"
                    Validator="@ValidationRule.IsNotEmpty"
                    @bind-BindValue="@CreateNewRewardModel.OutputTemplatePerReward"
                    SizeColumn="@ColumnSize.IsAuto"
                />
                
                <ValidatedMemoEditFormField
                    FieldLabel="Redemption Message Template"
                    Validator="@ValidationRule.IsNotEmpty"
                    @bind-BindValue="@CreateNewRewardModel.OutputTemplatePerRedemption"
                    SizeColumn="@ColumnSize.IsAuto"
                />
            </Fields>
        </Validations>
    </Column>

    <Button Color="Color.Primary" Clicked="@OnSaveClicked" Disabled="@ValidationFailed">
        Validate and Submit
    </Button>
</Row>


@code {
    Validations ValidationsRefRequest { get; set; } = null!;
    Validations ValidationsRefMessageTemplates { get; set; } = null!;

    // temporarily set the userId field to string.Empty, set to correct Id later on.
    PostManagedRewardDto CreateNewRewardModel { get; } = new(string.Empty, new CreateCustomRewardsRequest());
    
    private bool ValidationFailed { get; set; }

    private TwitchManagedRewardApi? _rewardApiCache;
    private TwitchManagedRewardApi RewardApi => _rewardApiCache ??= new TwitchManagedRewardApi(NavigationManager.BaseUri);

    
    // -----------------------------------------------------------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------------------------------------------------------
    private Task ValidationChanged(ValidationsStatusChangedEventArgs args) {  
        ValidationFailed = args.Status != ValidationStatus.Success;
        return Task.CompletedTask;
    }
    private async Task OnSaveClicked() {
        // if (ValidationsRef is null) {
        //     logger.Error("ValidationsRef was null");
        //     return;
        // }
        
        if (!await ValidationsRefRequest.ValidateAll() ) {
            logger.Warning("Some fields were not validated correctly");
            return;
        }
        
        if (!await ValidationsRefMessageTemplates.ValidateAll()) {
            logger.Warning("Templates couldn't be validated");
            return;
        }

        ApplicationUser? user = await UserAccessor.GetUserAsync();
        CreateNewRewardModel.UserId = user!.Id; // Update this correctly

        TwitchManagedRewardDtoApiResult response = await RewardApi.PostManagedRewardAsync(CreateNewRewardModel);
        
        
        if (response.Status == HttpStatusCode.NUMBER_200) {
            await ValidationsRefRequest.ClearAll();
            await ValidationsRefMessageTemplates.ClearAll();
        }

    }

}
