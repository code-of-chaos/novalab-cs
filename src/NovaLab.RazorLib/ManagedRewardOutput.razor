@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Serilog
@using NovaLab.ApiClient.Api
@using NovaLab.ApiClient.Model
@using NovaLab.RazorLib.Lib
@using NovaLab.Services.Twitch.Hubs
@using System.Globalization
@using ApplicationUser = NovaLab.Data.NovaLabUser

@attribute [StreamRendering, Authorize]

@inject HttpClient HttpClient
@inject ILogger logger
@inject NavigationManager NavigationManager
@inject IMessageService MessageService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserAccessor UserAccessor
@inject TwitchHubClient TwitchHubClient

<h2>REDEMPTIONS</h2>
<MemoEdit AutoSize @bind-Text="@_textOutput"/>

@code {
    private TwitchManagedRewardDto? _managedReward;

    [Parameter, EditorRequired]
    public TwitchManagedRewardDto? ManagedReward {
        get => _managedReward;
        set {
            if (_managedReward?.ManagedRewardId != value?.ManagedRewardId) {
                Items.Clear();  // RewardId changed, clear the items
                InvokeAsync(PopulateItems);
                logger.Information("ManagedReward changed, clearing items");
            }
            _managedReward = value;
        }
    }
    
    private List<TwitchManagedRewardRedemptionDto> Items { get; set; } = [];

    private ApplicationUser? _user;

    private TwitchManagedRewardRedemptionApi? _redemptionApiCache;
    private TwitchManagedRewardRedemptionApi RedemptionApi => _redemptionApiCache ??= new TwitchManagedRewardRedemptionApi(NavigationManager.BaseUri);

    private string _textOutput = string.Empty;
    
    // -----------------------------------------------------------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------------------------------------------------------
    protected override async Task OnInitializedAsync() {
        _user = await UserAccessor.GetUserAsync();
        await PopulateItems();
    }
    
    // Ensure to stop the connection when the component is being disposed
    private async ValueTask DisposeAsync() {
        await TwitchHubClient.DisposeAsync();
    }

    private async Task PopulateItems() {
        if (_user is null || ManagedReward is null) return;
        
        // Setup hub connection
        TwitchHubClient.OnNewManagedRewardRedemption(newRecord => {
            if (newRecord.ManagedRewardId != ManagedReward?.ManagedRewardId) return;

            Items.Add(newRecord);
            _textOutput = ParseTemplate() ?? string.Empty;
            
            // Notify the UI to update
            _ = InvokeAsync(StateHasChanged);
        });
        
        TwitchHubClient.OnClearedManagedReward(clearedRewardId => {
            if (clearedRewardId.ToString() != ManagedReward?.TwitchRewardId) return;
            Items.Clear();
            _textOutput = ParseTemplate() ?? string.Empty;
                
            // Notify the UI to update
            _ = InvokeAsync(StateHasChanged);
        });

        await TwitchHubClient.StartAsync(userId:_user.Id);
        
        TwitchManagedRewardRedemptionDtoApiResult? result = await RedemptionApi.GetRedemptionsAsync(_user.Id, rewardId:ManagedReward?.ManagedRewardId);
        Items = result.Data ?? [];
        _textOutput = ParseTemplate() ?? string.Empty;
    }

    protected override async Task OnParametersSetAsync() {
        await DisposeAsync();  // Dispose the current connection if any
        await PopulateItems(); // Populate items which will restart the connection
    }

    private string? ParseTemplate() {
        return ManagedReward?.OutputTemplatePerReward
            .Replace("{redemptions}", string.Join("\n", Items.Select(ParseTemplateRedemption)))
        ;
    }

    private string? ParseTemplateRedemption(TwitchManagedRewardRedemptionDto rewardRedemption) {
        return ManagedReward?.OutputTemplatePerRedemption
            .Replace("{time}", rewardRedemption.TimeStamp.ToString(CultureInfo.InvariantCulture))
            .Replace("{user}", rewardRedemption.UserName)
            .Replace("{msg}", rewardRedemption.Message)
            .Replace("{message}", rewardRedemption.Message)
        ;
    }

}