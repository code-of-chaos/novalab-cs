@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Serilog
@using NovaLab.ApiClient.Api
@using NovaLab.ApiClient.Model
@using NovaLab.RazorLib.Lib
@using NovaLab.Services.Twitch.Hubs
@using ApplicationUser = NovaLab.Data.NovaLabUser

@attribute [StreamRendering, Authorize]

@inject HttpClient HttpClient
@inject ILogger logger
@inject NavigationManager NavigationManager
@inject IMessageService MessageService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserAccessor UserAccessor

<h2>REDEMPTIONS TABLE</h2>
<Table>
    <TableHeader>
        
    </TableHeader>
    <TableFooter></TableFooter>
    
    <TableBody>
        @foreach (TwitchManagedRewardRedemption item in Items) {
            <TableRow>
                <TableCell>@ParseTemplate(item)</TableCell>
            </TableRow>
        }
    </TableBody>
    
</Table>

@code {

    [Parameter, EditorRequired]
    public TwitchManagedReward? ManagedReward { get; set; }
    
    private List<TwitchManagedRewardRedemption> Items { get; set; } = [];

    private HubConnector? _twitchHubConnectorCache;
    private HubConnector TwitchHubConnector => _twitchHubConnectorCache ??= new HubConnector(NavigationManager.ToAbsoluteUri("/hubs/twitch"));

    private ApplicationUser? _user;

    private TwitchManagedRewardRedemptionApi? _redemptionApiCache;
    private TwitchManagedRewardRedemptionApi RedemptionApi => _redemptionApiCache ??= new TwitchManagedRewardRedemptionApi(NavigationManager.BaseUri);
    // -----------------------------------------------------------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------------------------------------------------------
    protected override async Task OnInitializedAsync() {
        _user = await UserAccessor.GetUser();
        await PopulateItems();
    }
    
    // Ensure to stop the connection when the component is being disposed
    public async ValueTask DisposeAsync() {
        await TwitchHubConnector.DisposeAsync();
    }

    private async Task PopulateItems() {
        if (_user is null) return;
        
        // Setup hub connection
        await TwitchHubConnector
            .CreateConnection()
            .RegisterCallback<TwitchManagedRewardRedemption>(TwitchHubMethods.NewManagedRewardRedemption, newRecord => {
                if (newRecord.TwitchManagedReward.RewardId != ManagedReward?.RewardId) return;
                
                Items.Add(newRecord);
                // Notify the UI to update
                _ = InvokeAsync(StateHasChanged);
            })
            .Connect();

        TwitchManagedRewardRedemptionApiResult result = await RedemptionApi.GetRedemptionsAsync(_user.Id);
        List<TwitchManagedRewardRedemption> items = result.Data;
        Items = items ;
    }

    protected override async Task OnParametersSetAsync() {
        await DisposeAsync();
        await PopulateItems();
    }

    public string? ParseTemplate(TwitchManagedRewardRedemption rewardRedemption) {
        return ManagedReward?.OutputTemplatePerReward
            .Replace("{user}", rewardRedemption.Username)
            .Replace("{msg}", rewardRedemption.Message)
        ;
    }

}