@using Microsoft.AspNetCore.Authorization
@using NovaLab.ApiClient.Api
@using NovaLab.ApiClient.Model
@using NovaLab.RazorLib.Lib
@using Serilog
@using NovaLabUser=NovaLab.Data.NovaLabUser

@attribute [StreamRendering, Authorize]

@inject UserAccessor UserAccessor
@inject NavigationManager NavigationManager
@inject ILogger logger

<SelectList TItem="ManagedRewardModel"
            TValue="int"
            Data="@_indexedRewardData"
            TextField="@(item => item.Name)"
            ValueField="@(item => item.Id)"
            SelectedValue="@SelectedListValue"
            DefaultItemText="Choose Rewards"
            SelectedValueChanged="@SelectedValueChangedCallback"
            />

@code {
    public class ManagedRewardModel {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    [Parameter]
    public EventCallback<TwitchManagedRewardDto> Callback { get; set; }

    private TwitchManagedRewardDto[] _rewards = [];
    private IEnumerable<ManagedRewardModel> _indexedRewardData  = [];
    private int SelectedListValue { get; set; } = -1;
    private TwitchManagedRewardApi? _rewardApiCache;
    private TwitchManagedRewardApi RewardApi => _rewardApiCache ??= new TwitchManagedRewardApi(NavigationManager.BaseUri);

    // -----------------------------------------------------------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------------------------------------------------------
    protected override async Task OnInitializedAsync() {
        NovaLabUser? user = await UserAccessor.GetUserAsync();
        if (user is null) return;

        TwitchManagedRewardDtoApiResult result = await RewardApi.GetManagedRewardsAsync(user.Id);
        if (result.Status != HttpStatusCode.NUMBER_200) return;
        
        _rewards = result.Data.ToArray();
        _indexedRewardData = _rewards.Select((reward, i) => new ManagedRewardModel { Id = i, Name = reward.TwitchRewardId });
    }

    private async Task SelectedValueChangedCallback(int index) {
        SelectedListValue = index; 
        await Callback.InvokeAsync(_rewards[index]);
    }
}