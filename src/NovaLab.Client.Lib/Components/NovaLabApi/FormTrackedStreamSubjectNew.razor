@* ------------------------------------------------------------------------------------------------------------------ *@
@* Imports
@* ------------------------------------------------------------------------------------------------------------------ *@
@using ISOLib
@using NovaLab.ApiClient.Api
@using NovaLab.ApiClient.Model
@using Serilog
@using System.Security.Claims

@* ------------------------------------------------------------------------------------------------------------------ *@
@* Descriptors
@* ------------------------------------------------------------------------------------------------------------------ *@

@attribute [Authorize, StreamRendering]

@inject AuthenticationStateProvider authenticationStateProvider
@inject ILogger logger

@* ------------------------------------------------------------------------------------------------------------------ *@
@* Html
@* ------------------------------------------------------------------------------------------------------------------ *@

<Validations @ref="@(ValidationsRefRequest)" Mode="ValidationMode.Manual" Model="@TrackedStreamSubjectDtoPostModel">
    <Fields>
        @* Stream title *@
        <Field ColumnSize="ColumnSize.IsHalf">
            <FieldLabel>Twitch Stream Title</FieldLabel>
            <Validation Validator="ValidationRule.IsNotEmpty">
                <TextEdit Placeholder="Amazing Gameplay 101" @bind-Text="@TrackedStreamSubjectDtoPostModel.TwitchTitle">
                    <Feedback>
                        <ValidationNone>Please enter a stream title.</ValidationNone>
                        <ValidationError>Invalid stream title!</ValidationError>
                    </Feedback>
                </TextEdit>
            </Validation>
        </Field>

        @* Game title *@
        <Field ColumnSize="ColumnSize.Is4">
            <FieldLabel>Twitch Category</FieldLabel>
            <Validation Validator="ValidationRule.IsNotEmpty">
                <TextEdit Placeholder="Just Chatting" @bind-Text="@TrackedStreamSubjectDtoPostModel.TwitchGameTitleName">
                    <Feedback>
                        <ValidationNone>Please enter a category title.</ValidationNone>
                        <ValidationError>Invalid category title!</ValidationError>
                    </Feedback>
                </TextEdit>
            </Validation>
        </Field>

        @* Selection for already known games *@
        <Field ColumnSize="ColumnSize.Is2">
            
        </Field>
        
        @* Stream title *@
        <Field ColumnSize="ColumnSize.IsHalf">
            <FieldLabel>Broadcast Language</FieldLabel>
            <Select TValue="string" @bind-SelectedValue="@SelectedLanguage">
                @foreach (Language language in Languages.Collection) {
                    <SelectItem Value="@language.Alpha2">@language.Name</SelectItem>
                }
            </Select>
        </Field>
    </Fields>
    
    <Fields>
        <Field ColumnSize="ColumnSize.Is1">
            <Button Color="Color.Primary" Type="@ButtonType.Submit" Clicked="@OnSubmitClickedAsync">Save</Button>
        </Field>
        <Field ColumnSize="ColumnSize.Is1">
            <Button Color="Color.Secondary" Type="@ButtonType.Reset" Clicked="@OnCancelClickedAsync" >Cancel</Button>
        </Field>
        
        <Field>
            <Icon Name="@ResultIconName"></Icon>
        </Field>
    </Fields>
    
</Validations>

@* ------------------------------------------------------------------------------------------------------------------ *@
@* Code
@* ------------------------------------------------------------------------------------------------------------------ *@
@code {
    public Validations ValidationsRefRequest { get; set; } = null!;
    string SelectedLanguage { get; set; } = Languages.EN.Alpha2;
    IconName ResultIconName { get; set; } = IconName.Bell;
    
    TrackedStreamSubjectDtoPost TrackedStreamSubjectDtoPostModel { get; set; } = new(
        novaLabUserId:Guid.Empty,
        twitchGameTitleName:string.Empty,
        twitchBroadcastLanguage:Languages.EN.Alpha2,
        twitchTitle:string.Empty,
        twitchTags:[]
    );

    // ---------------------------------------------------------------------------------------------------------------------
    // Code
    // ---------------------------------------------------------------------------------------------------------------------
    private async Task OnCancelClickedAsync() {
        await ValidationsRefRequest.ClearAll();
        logger.Information("Cleared validations");
    }

    private async Task OnSubmitClickedAsync() {
        AuthenticationState authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal claims = authState.User;
        
        if (!await ValidationsRefRequest.ValidateAll() ) {
            logger.Warning("Some fields were not validated correctly");
            return;
        }
        logger.Information("Validated correctly");

        // Get the user id claim
        string? userIdClaim = claims.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (userIdClaim is null) {
            logger.Warning("User Id claim is null");
            return;
        }
        if (!Guid.TryParse(userIdClaim, out Guid userId))
        {
            logger.Warning("User Id claim is not a valid GUID");
            return;
        }
        
        TrackedStreamSubjectDtoPostModel.NovaLabUserId = userId;
        TrackedStreamSubjectDtoPostModel.TwitchBroadcastLanguage = SelectedLanguage;
        
        logger.Warning("{language}", SelectedLanguage);
        logger.Warning("{language}", TrackedStreamSubjectDtoPostModel.TwitchBroadcastLanguage);
        
        var api = new TrackedStreamSubjectApi();
        try {
            TrackedStreamSubjectDtoIApiResult result = await api.PostTrackedStreamSubjectAsync(TrackedStreamSubjectDtoPostModel);
            ResultIconName = result.Status switch {
                HttpStatusCode.NUMBER_200 => IconName.CheckCircle,
                _ => IconName.ExclamationCircle
            };
        }
        catch (Exception ex) {
            logger.Warning(ex, "unexpected error during execution to API endpoint");
            ResultIconName = IconName.ExclamationTriangle;
        }
    }
    
}