@* ------------------------------------------------------------------------------------------------------------------ *@
@* Imports
@* ------------------------------------------------------------------------------------------------------------------ *@
@using ISOLib
@using NovaLab.ApiClient.Api
@using NovaLab.ApiClient.Model
@using Serilog
@using System.Security.Claims

@* ------------------------------------------------------------------------------------------------------------------ *@
@* Descriptors
@* ------------------------------------------------------------------------------------------------------------------ *@

@attribute [Authorize, StreamRendering]

@inject AuthenticationStateProvider authenticationStateProvider
@inject ILogger logger

@* ------------------------------------------------------------------------------------------------------------------ *@
@* Html
@* ------------------------------------------------------------------------------------------------------------------ *@

<Validations @ref="@(ValidationsRefRequest)" Mode="ValidationMode.Manual" Model="@TrackedStreamSubjectDtoPostModel">
    <div class="card">
        <div class="card-header">
            <h3>Create New Tracked Stream Subject</h3>
        </div>
        <div class="card-body">
            <div class="form-group">
                <Field>
                    <FieldLabel ColumnSize="ColumnSize.Is2">Twitch Stream Title</FieldLabel>
                    <Validation Validator="ValidationRule.IsNotEmpty">
                        <TextEdit Placeholder="Amazing Gameplay 101" @bind-Text="@TrackedStreamSubjectDtoPostModel.TwitchTitle">
                            <Feedback>
                                <ValidationNone>Please enter a stream title.</ValidationNone>
                                <ValidationError>Invalid stream title!</ValidationError>
                            </Feedback>
                        </TextEdit>
                    </Validation>
                </Field>
            </div>
            <div class="form-group">
                <Field>
                    <FieldLabel ColumnSize="ColumnSize.Is2">Twitch Category</FieldLabel>
                    <Validation Validator="ValidationRule.IsNotEmpty">
                        <TextEdit Placeholder="Just Chatting" @bind-Text="@TrackedStreamSubjectDtoPostModel.TwitchGameTitleName">
                            <Feedback>
                                <ValidationNone>Please enter a category title.</ValidationNone>
                                <ValidationError>Invalid category title!</ValidationError>
                            </Feedback>
                        </TextEdit>
                    </Validation>
                </Field>
            </div>
            <div class="form-group">
                <Field>
                    <FieldLabel ColumnSize="ColumnSize.Is2">Twitch Category</FieldLabel>
                    <Validation Validator="ValidationRule.IsNotEmpty">
                        <TextEdit Placeholder="Just Chatting" @bind-Text="@TrackedStreamSubjectDtoPostModel.TwitchGameTitleName">
                            <Feedback>
                                <ValidationNone>Please enter a category title.</ValidationNone>
                                <ValidationError>Invalid category title!</ValidationError>
                            </Feedback>
                        </TextEdit>
                    </Validation>
                </Field>
            </div>
            <div class="form-group">
                <Image Source="https://static-cdn.jtvnw.net/ttv-boxart/1469308723-144x192.jpg"/>
            </div>
        </div>
        <div class="card-footer">
            <Button Color="Color.Primary" Type="@ButtonType.Submit">Save</Button>
            <Button Color="Color.Secondary" Type="@ButtonType.Button">Cancel</Button>
        </div>
    </div>
</Validations>

@* <Grid Columns="GridColumns.Are1" Rows="GridRows.Are3"> *@
@*     $1$ Title #1# *@
@*     <h3>Tracked Stream Subject</h3> *@
@*      *@
@*     $1$ Form Input  #1# *@
@*     <Grid Columns="GridColumns.Are3" Rows="GridRows.Are2"> *@
@*         <Column ColumnSize="ColumnSize.Is4"> *@
@*             <Alert Color="Color.Primary" Visible Margin="Margin.Is0"> *@
@*                 1 *@
@*             </Alert> *@
@*         </Column> *@
@*         <Column ColumnSize="ColumnSize.Is4"> *@
@*             <Alert Color="Color.Primary" Visible Margin="Margin.Is0"> *@
@*                 2 *@
@*             </Alert> *@
@*         </Column> *@
@*         <Column ColumnSize="ColumnSize.Is4"> *@
@*             <Image Source="https://static-cdn.jtvnw.net/ttv-boxart/1469308723-144x192.jpg"/> *@
@*         </Column> *@
@*     </Grid> *@
@*      *@
@*     $1$ Form Actions #1# *@
@*     <Alert Color="Color.Primary" Visible Margin="Margin.Is0"> *@
@*         Col 4 *@
@*     </Alert> *@
@* </Grid> *@

@* ------------------------------------------------------------------------------------------------------------------ *@
@* Code
@* ------------------------------------------------------------------------------------------------------------------ *@
@code {
    Validations ValidationsRefRequest { get; set; } = null!;
    
    TrackedStreamSubjectDtoPost TrackedStreamSubjectDtoPostModel { get; set; } = new(
        novaLabUserId:Guid.Empty,
        twitchGameTitleName:string.Empty,
        twitchBroadcastLanguage:Languages.EN.Alpha2,
        twitchTitle:string.Empty,
        twitchTags:[]
    );

    private async Task OnSubmitClickedAsync() {
        AuthenticationState authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal claims = authState.User;
        
        if (!await ValidationsRefRequest.ValidateAll() ) {
            logger.Warning("Some fields were not validated correctly");
            return;
        }

        // Get the user id claim
        string? userIdClaim = claims.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (userIdClaim is null) {
            logger.Warning("User Id claim is null");
            return;
        }
        if (!Guid.TryParse(userIdClaim, out Guid userId))
        {
            logger.Warning("User Id claim is not a valid GUID");
            return;
        }


        TrackedStreamSubjectDtoPostModel.NovaLabUserId = userId;
        
        var api = new TrackedStreamSubjectApi("https://localhost:9052");
        await api.PostTrackedStreamSubjectAsync(TrackedStreamSubjectDtoPostModel);
    }
    
}