@using Microsoft.AspNetCore.Components.Web
@using NovaLab.ApiClient.Api
@using NovaLab.ApiClient.Model
@using NovaLab.Client.Lib.Services
@using ILogger=Serilog.ILogger
@* ------------------------------------------------------------------------------------------------------------------ *@
@* Imports
@* ------------------------------------------------------------------------------------------------------------------ *@

@* ------------------------------------------------------------------------------------------------------------------ *@
@* Descriptors
@* ------------------------------------------------------------------------------------------------------------------ *@
@attribute [Authorize, StreamRendering]

@inject AuthenticationStateProvider authenticationStateProvider
@inject ILogger logger
@inject UserService UserService

@* ------------------------------------------------------------------------------------------------------------------ *@
@* Html
@* ------------------------------------------------------------------------------------------------------------------ *@
<div class="grid w-full grid-cols-1 gap-4 self-start sm:grid-cols-2 lg:grid-cols-3">
    @if (Data is not null) {
        @foreach (TrackedStreamSubjectDto item in Data) {
            
            <div class="flex h-min gap-2 rounded-xl border-4 border-slate-800 bg-white p-3 lg:gap-4">
                <div class="h-full w-1/3">
                    <img class="aspect-[2/3] h-auto w-full rounded-md"
                         alt="@item.TwitchGameName"
                         src="@item.TwitchGameImageUrl.Replace("{width}", "300").Replace("{height}", "400")"
                    />
                </div>
                <div class="flex w-px flex-1 flex-col gap-2">
                    <div class="text-sm font-bold leading-5 lg:text-xl">
                        <h2>@item.TwitchTitle</h2>
                    </div>
                    <div class="flex gap-2 text-xs font-semibold leading-4">
                        @foreach (string tag in item.TwitchTags) {
                            <span class="rounded-lg bg-blue-800 px-2 pb-1 pt-0.5 text-white">@tag </span>
                        }
                    </div>
                    <div class="mt-auto flex gap-2 text-xs font-semibold leading-4 xl:text-xl">
                        <Buttons class="flex w-full justify-between gap-2">
                            <div class="flex gap-2">
                                <Button class="px-2 py-1 xl:px-3 xl:py-2"
                                        Color="Color.Danger"
                                        Outline
                                        Type="@ButtonType.Submit"
                                        Clicked="@(() => ShowDeleteModal(item.Id))">
                                    Delete
                                </Button>
                                <Button class="px-2 py-1 xl:px-3 xl:py-2"
                                        Color="Color.Secondary"
                                        Outline
                                        Type="@ButtonType.Link" To=@($"/stream-subject/detail/{item.Id.ToString()}")>
                                    Edit
                                </Button>
                            </div>
                        </Buttons>
                        <div class="ml-auto">
                            <Button class="ml-auto px-2 py-1 xl:px-3 xl:py-2 justify-end" Color="Color.Primary" Outline Type="@ButtonType.Submit" Clicked="@(() => OnSubmitClickedAsync(item.Id))">
                                Apply
                            </Button>
                        </div>

                        @* <LucideIcon Icon="@Icons." *@
                    </div>
                </div>
            </div>
        }
    }

    <div class="card-container">
        <div class="card-picture"></div>
        <div class="card-header"></div>
        <div class="card-tags"></div>
        <div class="card-buttons">
            <Button Color="Color.Secondary" Outline Type="@ButtonType.Link" To="/stream-subject/detail">
                Create new stream
            </Button>
        </div>
    </div>
    
</div>

<Modal @ref="ModalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Delete Tracked Stream Subject</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <p>Are you sure you want to delete this Tracked Stream Subject?</p>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Danger" Clicked="@TryDeleteRecordAndCloseModalAsync">Yes</Button>
            <Button Color="Color.Success" Clicked="@CloseModal">No</Button>
        </ModalFooter>
    </ModalContent>
</Modal>


@* <ListGroup Mode="ListGroupMode.Selectable" @bind-SelectedItem="SelectedItemGuidString"> *@
@*     @if (Data is not null) { *@
@*         @foreach (TrackedStreamSubjectDto item in Data) { *@
@*             <ListGroupItem Name="@item.Id.ToString()">@item.TwitchTitle</ListGroupItem> *@
@*         } *@
@*     } *@
@* </ListGroup> *@
@* *@
@* <Button Color="Color.Primary" Type="@ButtonType.Submit" Clicked="@OnSubmitClickedAsync">Save</Button> *@

@* ------------------------------------------------------------------------------------------------------------------ *@
@* Code
@* ------------------------------------------------------------------------------------------------------------------ *@

@code {
    private List<TrackedStreamSubjectDto>? Data { get; set; } = null;
    
    private Modal? ModalRef { get; set; }
    private Guid? SelectedRecordId { get; set; } = null;
    
    
    // -----------------------------------------------------------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------------------------------------------------------
    protected override async Task OnInitializedAsync() {
        Guid? userId = await UserService.GetUserIdAsync();
        if (userId is null) return;
        
        var api = new TrackedStreamSubjectApi();
        logger.Warning(api.GetBasePath());
        
        TrackedStreamSubjectDtoIApiResult result = await api.GetTrackedStreamSubjectsAsync(userId:userId);
        Data = result.Data;
    }

    private async Task OnSubmitClickedAsync(Guid itemId) {
        Guid? userId = await UserService.GetUserIdAsync();
        if (userId is null) return;
        
        var api = new TrackedStreamSubjectApi();
        await api.SelectTrackedStreamSubjectAsync(
            userId,
            itemId
        );
        logger.Information("SENT!!!");
    }

    private void ShowDeleteModal(Guid itemId) {
        SelectedRecordId = itemId;
        
        ModalRef?.Show();
    }
    
    private async Task TryDeleteRecordAndCloseModalAsync(MouseEventArgs obj) {
        Guid? userId = await UserService.GetUserIdAsync();
        if (userId is null) return;
        
        var api = new TrackedStreamSubjectApi();
        await api.DeleteTrackedStreamSubjectAsync(
            SelectedRecordId
        );
        
        Data = null;
        TrackedStreamSubjectDtoIApiResult result = await api.GetTrackedStreamSubjectsAsync(userId:userId);
        Data = result.Data;
        
        ModalRef?.Hide();
    }
    
    private void CloseModal(MouseEventArgs obj) {
        ModalRef?.Hide();
    }
}