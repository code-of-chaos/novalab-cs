@using Microsoft.AspNetCore.Components.Web
@using NovaLab.ApiClient.Api
@using NovaLab.ApiClient.Model
@using NovaLab.Client.Lib.Services
@using ILogger=Serilog.ILogger
@using CodeOfChaos.Lucide
@* ------------------------------------------------------------------------------------------------------------------ *@
@* Imports
@* ------------------------------------------------------------------------------------------------------------------ *@

@* ------------------------------------------------------------------------------------------------------------------ *@
@* Descriptors
@* ------------------------------------------------------------------------------------------------------------------ *@
@attribute [Authorize, StreamRendering]

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger Logger
@inject UserService UserService
@inject NovaLabApiService NovaLabApiService

@* ------------------------------------------------------------------------------------------------------------------ *@
@* Html
@* ------------------------------------------------------------------------------------------------------------------ *@
<style>
    .card-container {
        /* insert your styles here */
        display:flex;
        flex-direction: row;
        justify-content: center;

        gap: 1rem 3rem;
    }

    .card-item {

    }
</style>

<div class="card-container">
    @if (Data is not null) {
        @foreach (TrackedStreamSubjectDto item in Data) {
            <div class="card-item">
                <img alt="@item.TwitchGameName" src="@item.TwitchGameImageUrl.Replace("{width}", "300").Replace("{height}", "400")"/>
                <div class="card-item-header">
                    <h2>@item.TwitchTitle</h2>
                    <div class="card-item-tags">
                        @foreach (string tag in item.TwitchTags) {
                            <span>@tag </span>
                        }
                    </div>
                </div>
                <div>
                    <Buttons>
                        <Button
                            Class="container-with-lucide-icon"
                            Color="Color.Secondary"
                            Outline
                            Type="@ButtonType.Link"
                            To=@($"/stream-subject/detail/{item.Id.ToString()}")>
                            <LucideIcon Name="Icons.Pencil" CssClass="icon"/>
                            Edit
                        </Button>
                        <Button
                            Class="container-with-lucide-icon"
                            Color="Color.Danger"
                            Outline
                            Type="@ButtonType.Submit"
                            Clicked="@(() => ShowDeleteModal(item.Id))">
                            <LucideIcon Name="Icons.Trash2" CssClass="icon"/>
                            Delete
                        </Button>
                    </Buttons>
                    <Button
                        Color="Color.Primary"
                        Outline
                        Type="@ButtonType.Submit"
                        Clicked="@(() => OnSubmitClickedAsync(item.Id))">
                        Apply
                    </Button>
                </div>
            </div>
        }
    }
</div>

<Modal @ref="ModalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Delete Tracked Stream Subject</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <p>Are you sure you want to delete this Tracked Stream Subject?</p>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Danger" Clicked="@TryDeleteRecordAndCloseModalAsync">Yes</Button>
            <Button Color="Color.Success" Clicked="@CloseModal">No</Button>
        </ModalFooter>
    </ModalContent>
</Modal>


@* <ListGroup Mode="ListGroupMode.Selectable" @bind-SelectedItem="SelectedItemGuidString"> *@
@*     @if (Data is not null) { *@
@*         @foreach (TrackedStreamSubjectDto item in Data) { *@
@*             <ListGroupItem Name="@item.Id.ToString()">@item.TwitchTitle</ListGroupItem> *@
@*         } *@
@*     } *@
@* </ListGroup> *@
@* *@
@* <Button Color="Color.Primary" Type="@ButtonType.Submit" Clicked="@OnSubmitClickedAsync">Save</Button> *@

@* ------------------------------------------------------------------------------------------------------------------ *@
@* Code
@* ------------------------------------------------------------------------------------------------------------------ *@

@code {
    private List<TrackedStreamSubjectDto>? Data { get; set; } = null;
    
    private Modal? ModalRef { get; set; }
    private Guid? SelectedRecordId { get; set; } = null;
    
    // -----------------------------------------------------------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------------------------------------------------------
    protected override async Task OnInitializedAsync() {
        Guid? userId = await UserService.GetUserIdAsync();
        if (userId is null) return;
        
        Logger.Warning(NovaLabApiService.TrackedStreamSubject.GetBasePath());
        
        TrackedStreamSubjectDtoIApiResult result = await NovaLabApiService.TrackedStreamSubject.GetTrackedStreamSubjectsAsync(userId:userId);
        Data = result.Data;
    }

    private async Task OnSubmitClickedAsync(Guid itemId) {
        Guid? userId = await UserService.GetUserIdAsync();
        if (userId is null) return;
        
        await NovaLabApiService.TrackedStreamSubject.SelectTrackedStreamSubjectAsync(
            userId,
            itemId
        );
        Logger.Information("SENT!!!");
    }

    private void ShowDeleteModal(Guid itemId) {
        SelectedRecordId = itemId;
        
        ModalRef?.Show();
    }
    
    private async Task TryDeleteRecordAndCloseModalAsync(MouseEventArgs obj) {
        Guid? userId = await UserService.GetUserIdAsync();
        if (userId is null) return;
        
        await NovaLabApiService.TrackedStreamSubject.DeleteTrackedStreamSubjectAsync(
            SelectedRecordId
        );
        
        Data = null;
        TrackedStreamSubjectDtoIApiResult result = await NovaLabApiService.TrackedStreamSubject.GetTrackedStreamSubjectsAsync(userId:userId);
        Data = result.Data;
        
        ModalRef?.Hide();
    }
    
    private void CloseModal(MouseEventArgs obj) {
        ModalRef?.Hide();
    }
}