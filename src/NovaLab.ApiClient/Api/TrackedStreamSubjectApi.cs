/*
 * NovaLab API
 *
 * An ASP.NET Core Web API for managing your streams
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using NovaLab.ApiClient.Client;
using NovaLab.ApiClient.Model;

namespace NovaLab.ApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITrackedStreamSubjectApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BooleanIApiResult</returns>
        BooleanIApiResult DeleteTrackedStreamSubject(Guid? subjectId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BooleanIApiResult</returns>
        ApiResponse<BooleanIApiResult> DeleteTrackedStreamSubjectWithHttpInfo(Guid? subjectId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackedStreamSubjectDtoIApiResult</returns>
        TrackedStreamSubjectDtoIApiResult GetTrackedStreamSubject(Guid? userId = default(Guid?), Guid? subjectId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackedStreamSubjectDtoIApiResult</returns>
        ApiResponse<TrackedStreamSubjectDtoIApiResult> GetTrackedStreamSubjectWithHttpInfo(Guid? userId = default(Guid?), Guid? subjectId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackedStreamSubjectDtoIApiResult</returns>
        TrackedStreamSubjectDtoIApiResult GetTrackedStreamSubjects(Guid? userId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackedStreamSubjectDtoIApiResult</returns>
        ApiResponse<TrackedStreamSubjectDtoIApiResult> GetTrackedStreamSubjectsWithHttpInfo(Guid? userId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BooleanIApiResult</returns>
        BooleanIApiResult SelectTrackedStreamSubject(Guid? userId = default(Guid?), Guid? subjectId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BooleanIApiResult</returns>
        ApiResponse<BooleanIApiResult> SelectTrackedStreamSubjectWithHttpInfo(Guid? userId = default(Guid?), Guid? subjectId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="trackedStreamSubjectDtoPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackedStreamSubjectDtoIApiResult</returns>
        TrackedStreamSubjectDtoIApiResult UpsertTrackedStreamSubject(Guid? subjectId = default(Guid?), TrackedStreamSubjectDtoPost? trackedStreamSubjectDtoPost = default(TrackedStreamSubjectDtoPost?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="trackedStreamSubjectDtoPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackedStreamSubjectDtoIApiResult</returns>
        ApiResponse<TrackedStreamSubjectDtoIApiResult> UpsertTrackedStreamSubjectWithHttpInfo(Guid? subjectId = default(Guid?), TrackedStreamSubjectDtoPost? trackedStreamSubjectDtoPost = default(TrackedStreamSubjectDtoPost?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITrackedStreamSubjectApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BooleanIApiResult</returns>
        System.Threading.Tasks.Task<BooleanIApiResult> DeleteTrackedStreamSubjectAsync(Guid? subjectId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BooleanIApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BooleanIApiResult>> DeleteTrackedStreamSubjectWithHttpInfoAsync(Guid? subjectId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackedStreamSubjectDtoIApiResult</returns>
        System.Threading.Tasks.Task<TrackedStreamSubjectDtoIApiResult> GetTrackedStreamSubjectAsync(Guid? userId = default(Guid?), Guid? subjectId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackedStreamSubjectDtoIApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackedStreamSubjectDtoIApiResult>> GetTrackedStreamSubjectWithHttpInfoAsync(Guid? userId = default(Guid?), Guid? subjectId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackedStreamSubjectDtoIApiResult</returns>
        System.Threading.Tasks.Task<TrackedStreamSubjectDtoIApiResult> GetTrackedStreamSubjectsAsync(Guid? userId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackedStreamSubjectDtoIApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackedStreamSubjectDtoIApiResult>> GetTrackedStreamSubjectsWithHttpInfoAsync(Guid? userId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BooleanIApiResult</returns>
        System.Threading.Tasks.Task<BooleanIApiResult> SelectTrackedStreamSubjectAsync(Guid? userId = default(Guid?), Guid? subjectId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BooleanIApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<BooleanIApiResult>> SelectTrackedStreamSubjectWithHttpInfoAsync(Guid? userId = default(Guid?), Guid? subjectId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="trackedStreamSubjectDtoPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackedStreamSubjectDtoIApiResult</returns>
        System.Threading.Tasks.Task<TrackedStreamSubjectDtoIApiResult> UpsertTrackedStreamSubjectAsync(Guid? subjectId = default(Guid?), TrackedStreamSubjectDtoPost? trackedStreamSubjectDtoPost = default(TrackedStreamSubjectDtoPost?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="trackedStreamSubjectDtoPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackedStreamSubjectDtoIApiResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackedStreamSubjectDtoIApiResult>> UpsertTrackedStreamSubjectWithHttpInfoAsync(Guid? subjectId = default(Guid?), TrackedStreamSubjectDtoPost? trackedStreamSubjectDtoPost = default(TrackedStreamSubjectDtoPost?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITrackedStreamSubjectApi : ITrackedStreamSubjectApiSync, ITrackedStreamSubjectApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TrackedStreamSubjectApi : ITrackedStreamSubjectApi
    {
        private NovaLab.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedStreamSubjectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TrackedStreamSubjectApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedStreamSubjectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TrackedStreamSubjectApi(string basePath)
        {
            this.Configuration = NovaLab.ApiClient.Client.Configuration.MergeConfigurations(
                NovaLab.ApiClient.Client.GlobalConfiguration.Instance,
                new NovaLab.ApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new NovaLab.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new NovaLab.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = NovaLab.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedStreamSubjectApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TrackedStreamSubjectApi(NovaLab.ApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = NovaLab.ApiClient.Client.Configuration.MergeConfigurations(
                NovaLab.ApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new NovaLab.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new NovaLab.ApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = NovaLab.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedStreamSubjectApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TrackedStreamSubjectApi(NovaLab.ApiClient.Client.ISynchronousClient client, NovaLab.ApiClient.Client.IAsynchronousClient asyncClient, NovaLab.ApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = NovaLab.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public NovaLab.ApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public NovaLab.ApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public NovaLab.ApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public NovaLab.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BooleanIApiResult</returns>
        public BooleanIApiResult DeleteTrackedStreamSubject(Guid? subjectId = default(Guid?), int operationIndex = 0)
        {
            NovaLab.ApiClient.Client.ApiResponse<BooleanIApiResult> localVarResponse = DeleteTrackedStreamSubjectWithHttpInfo(subjectId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BooleanIApiResult</returns>
        public NovaLab.ApiClient.Client.ApiResponse<BooleanIApiResult> DeleteTrackedStreamSubjectWithHttpInfo(Guid? subjectId = default(Guid?), int operationIndex = 0)
        {
            NovaLab.ApiClient.Client.RequestOptions localVarRequestOptions = new NovaLab.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = NovaLab.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = NovaLab.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subjectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(NovaLab.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "subject-id", subjectId));
            }

            localVarRequestOptions.Operation = "TrackedStreamSubjectApi.DeleteTrackedStreamSubject";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<BooleanIApiResult>("/api/twitch/tracked-stream-subject", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTrackedStreamSubject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BooleanIApiResult</returns>
        public async System.Threading.Tasks.Task<BooleanIApiResult> DeleteTrackedStreamSubjectAsync(Guid? subjectId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            NovaLab.ApiClient.Client.ApiResponse<BooleanIApiResult> localVarResponse = await DeleteTrackedStreamSubjectWithHttpInfoAsync(subjectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BooleanIApiResult)</returns>
        public async System.Threading.Tasks.Task<NovaLab.ApiClient.Client.ApiResponse<BooleanIApiResult>> DeleteTrackedStreamSubjectWithHttpInfoAsync(Guid? subjectId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            NovaLab.ApiClient.Client.RequestOptions localVarRequestOptions = new NovaLab.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = NovaLab.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = NovaLab.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subjectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(NovaLab.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "subject-id", subjectId));
            }

            localVarRequestOptions.Operation = "TrackedStreamSubjectApi.DeleteTrackedStreamSubject";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<BooleanIApiResult>("/api/twitch/tracked-stream-subject", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTrackedStreamSubject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackedStreamSubjectDtoIApiResult</returns>
        public TrackedStreamSubjectDtoIApiResult GetTrackedStreamSubject(Guid? userId = default(Guid?), Guid? subjectId = default(Guid?), int operationIndex = 0)
        {
            NovaLab.ApiClient.Client.ApiResponse<TrackedStreamSubjectDtoIApiResult> localVarResponse = GetTrackedStreamSubjectWithHttpInfo(userId, subjectId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackedStreamSubjectDtoIApiResult</returns>
        public NovaLab.ApiClient.Client.ApiResponse<TrackedStreamSubjectDtoIApiResult> GetTrackedStreamSubjectWithHttpInfo(Guid? userId = default(Guid?), Guid? subjectId = default(Guid?), int operationIndex = 0)
        {
            NovaLab.ApiClient.Client.RequestOptions localVarRequestOptions = new NovaLab.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = NovaLab.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = NovaLab.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(NovaLab.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "user-id", userId));
            }
            if (subjectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(NovaLab.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "subject-id", subjectId));
            }

            localVarRequestOptions.Operation = "TrackedStreamSubjectApi.GetTrackedStreamSubject";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TrackedStreamSubjectDtoIApiResult>("/api/twitch/tracked-stream-subject", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrackedStreamSubject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackedStreamSubjectDtoIApiResult</returns>
        public async System.Threading.Tasks.Task<TrackedStreamSubjectDtoIApiResult> GetTrackedStreamSubjectAsync(Guid? userId = default(Guid?), Guid? subjectId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            NovaLab.ApiClient.Client.ApiResponse<TrackedStreamSubjectDtoIApiResult> localVarResponse = await GetTrackedStreamSubjectWithHttpInfoAsync(userId, subjectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackedStreamSubjectDtoIApiResult)</returns>
        public async System.Threading.Tasks.Task<NovaLab.ApiClient.Client.ApiResponse<TrackedStreamSubjectDtoIApiResult>> GetTrackedStreamSubjectWithHttpInfoAsync(Guid? userId = default(Guid?), Guid? subjectId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            NovaLab.ApiClient.Client.RequestOptions localVarRequestOptions = new NovaLab.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = NovaLab.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = NovaLab.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(NovaLab.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "user-id", userId));
            }
            if (subjectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(NovaLab.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "subject-id", subjectId));
            }

            localVarRequestOptions.Operation = "TrackedStreamSubjectApi.GetTrackedStreamSubject";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TrackedStreamSubjectDtoIApiResult>("/api/twitch/tracked-stream-subject", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrackedStreamSubject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackedStreamSubjectDtoIApiResult</returns>
        public TrackedStreamSubjectDtoIApiResult GetTrackedStreamSubjects(Guid? userId = default(Guid?), int operationIndex = 0)
        {
            NovaLab.ApiClient.Client.ApiResponse<TrackedStreamSubjectDtoIApiResult> localVarResponse = GetTrackedStreamSubjectsWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackedStreamSubjectDtoIApiResult</returns>
        public NovaLab.ApiClient.Client.ApiResponse<TrackedStreamSubjectDtoIApiResult> GetTrackedStreamSubjectsWithHttpInfo(Guid? userId = default(Guid?), int operationIndex = 0)
        {
            NovaLab.ApiClient.Client.RequestOptions localVarRequestOptions = new NovaLab.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = NovaLab.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = NovaLab.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(NovaLab.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "user-id", userId));
            }

            localVarRequestOptions.Operation = "TrackedStreamSubjectApi.GetTrackedStreamSubjects";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TrackedStreamSubjectDtoIApiResult>("/api/twitch/tracked-stream-subject/all", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrackedStreamSubjects", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackedStreamSubjectDtoIApiResult</returns>
        public async System.Threading.Tasks.Task<TrackedStreamSubjectDtoIApiResult> GetTrackedStreamSubjectsAsync(Guid? userId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            NovaLab.ApiClient.Client.ApiResponse<TrackedStreamSubjectDtoIApiResult> localVarResponse = await GetTrackedStreamSubjectsWithHttpInfoAsync(userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackedStreamSubjectDtoIApiResult)</returns>
        public async System.Threading.Tasks.Task<NovaLab.ApiClient.Client.ApiResponse<TrackedStreamSubjectDtoIApiResult>> GetTrackedStreamSubjectsWithHttpInfoAsync(Guid? userId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            NovaLab.ApiClient.Client.RequestOptions localVarRequestOptions = new NovaLab.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = NovaLab.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = NovaLab.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(NovaLab.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "user-id", userId));
            }

            localVarRequestOptions.Operation = "TrackedStreamSubjectApi.GetTrackedStreamSubjects";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TrackedStreamSubjectDtoIApiResult>("/api/twitch/tracked-stream-subject/all", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrackedStreamSubjects", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BooleanIApiResult</returns>
        public BooleanIApiResult SelectTrackedStreamSubject(Guid? userId = default(Guid?), Guid? subjectId = default(Guid?), int operationIndex = 0)
        {
            NovaLab.ApiClient.Client.ApiResponse<BooleanIApiResult> localVarResponse = SelectTrackedStreamSubjectWithHttpInfo(userId, subjectId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BooleanIApiResult</returns>
        public NovaLab.ApiClient.Client.ApiResponse<BooleanIApiResult> SelectTrackedStreamSubjectWithHttpInfo(Guid? userId = default(Guid?), Guid? subjectId = default(Guid?), int operationIndex = 0)
        {
            NovaLab.ApiClient.Client.RequestOptions localVarRequestOptions = new NovaLab.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = NovaLab.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = NovaLab.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(NovaLab.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "user-id", userId));
            }
            if (subjectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(NovaLab.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "subject-id", subjectId));
            }

            localVarRequestOptions.Operation = "TrackedStreamSubjectApi.SelectTrackedStreamSubject";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BooleanIApiResult>("/api/twitch/tracked-stream-subject/select", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SelectTrackedStreamSubject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BooleanIApiResult</returns>
        public async System.Threading.Tasks.Task<BooleanIApiResult> SelectTrackedStreamSubjectAsync(Guid? userId = default(Guid?), Guid? subjectId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            NovaLab.ApiClient.Client.ApiResponse<BooleanIApiResult> localVarResponse = await SelectTrackedStreamSubjectWithHttpInfoAsync(userId, subjectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BooleanIApiResult)</returns>
        public async System.Threading.Tasks.Task<NovaLab.ApiClient.Client.ApiResponse<BooleanIApiResult>> SelectTrackedStreamSubjectWithHttpInfoAsync(Guid? userId = default(Guid?), Guid? subjectId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            NovaLab.ApiClient.Client.RequestOptions localVarRequestOptions = new NovaLab.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = NovaLab.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = NovaLab.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(NovaLab.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "user-id", userId));
            }
            if (subjectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(NovaLab.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "subject-id", subjectId));
            }

            localVarRequestOptions.Operation = "TrackedStreamSubjectApi.SelectTrackedStreamSubject";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BooleanIApiResult>("/api/twitch/tracked-stream-subject/select", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SelectTrackedStreamSubject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="trackedStreamSubjectDtoPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TrackedStreamSubjectDtoIApiResult</returns>
        public TrackedStreamSubjectDtoIApiResult UpsertTrackedStreamSubject(Guid? subjectId = default(Guid?), TrackedStreamSubjectDtoPost? trackedStreamSubjectDtoPost = default(TrackedStreamSubjectDtoPost?), int operationIndex = 0)
        {
            NovaLab.ApiClient.Client.ApiResponse<TrackedStreamSubjectDtoIApiResult> localVarResponse = UpsertTrackedStreamSubjectWithHttpInfo(subjectId, trackedStreamSubjectDtoPost);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="trackedStreamSubjectDtoPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TrackedStreamSubjectDtoIApiResult</returns>
        public NovaLab.ApiClient.Client.ApiResponse<TrackedStreamSubjectDtoIApiResult> UpsertTrackedStreamSubjectWithHttpInfo(Guid? subjectId = default(Guid?), TrackedStreamSubjectDtoPost? trackedStreamSubjectDtoPost = default(TrackedStreamSubjectDtoPost?), int operationIndex = 0)
        {
            NovaLab.ApiClient.Client.RequestOptions localVarRequestOptions = new NovaLab.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = NovaLab.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = NovaLab.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subjectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(NovaLab.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "subjectId", subjectId));
            }
            localVarRequestOptions.Data = trackedStreamSubjectDtoPost;

            localVarRequestOptions.Operation = "TrackedStreamSubjectApi.UpsertTrackedStreamSubject";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TrackedStreamSubjectDtoIApiResult>("/api/twitch/tracked-stream-subject", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpsertTrackedStreamSubject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="trackedStreamSubjectDtoPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TrackedStreamSubjectDtoIApiResult</returns>
        public async System.Threading.Tasks.Task<TrackedStreamSubjectDtoIApiResult> UpsertTrackedStreamSubjectAsync(Guid? subjectId = default(Guid?), TrackedStreamSubjectDtoPost? trackedStreamSubjectDtoPost = default(TrackedStreamSubjectDtoPost?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            NovaLab.ApiClient.Client.ApiResponse<TrackedStreamSubjectDtoIApiResult> localVarResponse = await UpsertTrackedStreamSubjectWithHttpInfoAsync(subjectId, trackedStreamSubjectDtoPost, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="NovaLab.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subjectId"> (optional)</param>
        /// <param name="trackedStreamSubjectDtoPost"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TrackedStreamSubjectDtoIApiResult)</returns>
        public async System.Threading.Tasks.Task<NovaLab.ApiClient.Client.ApiResponse<TrackedStreamSubjectDtoIApiResult>> UpsertTrackedStreamSubjectWithHttpInfoAsync(Guid? subjectId = default(Guid?), TrackedStreamSubjectDtoPost? trackedStreamSubjectDtoPost = default(TrackedStreamSubjectDtoPost?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            NovaLab.ApiClient.Client.RequestOptions localVarRequestOptions = new NovaLab.ApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = NovaLab.ApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = NovaLab.ApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (subjectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(NovaLab.ApiClient.Client.ClientUtils.ParameterToMultiMap("", "subjectId", subjectId));
            }
            localVarRequestOptions.Data = trackedStreamSubjectDtoPost;

            localVarRequestOptions.Operation = "TrackedStreamSubjectApi.UpsertTrackedStreamSubject";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TrackedStreamSubjectDtoIApiResult>("/api/twitch/tracked-stream-subject", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpsertTrackedStreamSubject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
