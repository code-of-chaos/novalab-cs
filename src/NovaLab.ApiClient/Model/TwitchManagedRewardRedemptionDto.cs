/*
 * NovaLab API
 *
 * An ASP.NET Core Web API for managing your streams
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = NovaLab.ApiClient.Client.OpenAPIDateConverter;

namespace NovaLab.ApiClient.Model
{
    /// <summary>
    /// TwitchManagedRewardRedemptionDto
    /// </summary>
    [DataContract(Name = "TwitchManagedRewardRedemptionDto")]
    public partial class TwitchManagedRewardRedemptionDto : IEquatable<TwitchManagedRewardRedemptionDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TwitchManagedRewardRedemptionDto" /> class.
        /// </summary>
        /// <param name="managedRewardRedemptionId">managedRewardRedemptionId.</param>
        /// <param name="managedRewardId">managedRewardId.</param>
        /// <param name="timeStamp">timeStamp.</param>
        /// <param name="userName">userName.</param>
        /// <param name="message">message.</param>
        public TwitchManagedRewardRedemptionDto(Guid managedRewardRedemptionId = default(Guid), Guid managedRewardId = default(Guid), DateTime timeStamp = default(DateTime), string userName = default(string), string message = default(string))
        {
            this.ManagedRewardRedemptionId = managedRewardRedemptionId;
            this.ManagedRewardId = managedRewardId;
            this.TimeStamp = timeStamp;
            this.UserName = userName;
            this.Message = message;
        }

        /// <summary>
        /// Gets or Sets ManagedRewardRedemptionId
        /// </summary>
        [DataMember(Name = "managedRewardRedemptionId", EmitDefaultValue = false)]
        public Guid ManagedRewardRedemptionId { get; set; }

        /// <summary>
        /// Gets or Sets ManagedRewardId
        /// </summary>
        [DataMember(Name = "managedRewardId", EmitDefaultValue = false)]
        public Guid ManagedRewardId { get; set; }

        /// <summary>
        /// Gets or Sets TimeStamp
        /// </summary>
        [DataMember(Name = "timeStamp", EmitDefaultValue = false)]
        public DateTime TimeStamp { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name = "userName", EmitDefaultValue = true)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TwitchManagedRewardRedemptionDto {\n");
            sb.Append("  ManagedRewardRedemptionId: ").Append(ManagedRewardRedemptionId).Append("\n");
            sb.Append("  ManagedRewardId: ").Append(ManagedRewardId).Append("\n");
            sb.Append("  TimeStamp: ").Append(TimeStamp).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TwitchManagedRewardRedemptionDto);
        }

        /// <summary>
        /// Returns true if TwitchManagedRewardRedemptionDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TwitchManagedRewardRedemptionDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TwitchManagedRewardRedemptionDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ManagedRewardRedemptionId == input.ManagedRewardRedemptionId ||
                    (this.ManagedRewardRedemptionId != null &&
                    this.ManagedRewardRedemptionId.Equals(input.ManagedRewardRedemptionId))
                ) && 
                (
                    this.ManagedRewardId == input.ManagedRewardId ||
                    (this.ManagedRewardId != null &&
                    this.ManagedRewardId.Equals(input.ManagedRewardId))
                ) && 
                (
                    this.TimeStamp == input.TimeStamp ||
                    (this.TimeStamp != null &&
                    this.TimeStamp.Equals(input.TimeStamp))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ManagedRewardRedemptionId != null)
                {
                    hashCode = (hashCode * 59) + this.ManagedRewardRedemptionId.GetHashCode();
                }
                if (this.ManagedRewardId != null)
                {
                    hashCode = (hashCode * 59) + this.ManagedRewardId.GetHashCode();
                }
                if (this.TimeStamp != null)
                {
                    hashCode = (hashCode * 59) + this.TimeStamp.GetHashCode();
                }
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
