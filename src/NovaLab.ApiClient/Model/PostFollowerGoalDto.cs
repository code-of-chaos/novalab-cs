/*
 * NovaLab API
 *
 * An ASP.NET Core Web API for managing your streams
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = NovaLab.ApiClient.Client.OpenAPIDateConverter;

namespace NovaLab.ApiClient.Model
{
    /// <summary>
    /// PostFollowerGoalDto
    /// </summary>
    [DataContract(Name = "PostFollowerGoalDto")]
    public partial class PostFollowerGoalDto : IEquatable<PostFollowerGoalDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostFollowerGoalDto" /> class.
        /// </summary>
        /// <param name="userId">userId.</param>
        /// <param name="dailyGoal">dailyGoal.</param>
        /// <param name="divider">divider.</param>
        /// <param name="customCssStyling">customCssStyling.</param>
        public PostFollowerGoalDto(string userId = default(string), int dailyGoal = default(int), string divider = default(string), string customCssStyling = default(string))
        {
            this.UserId = userId;
            this.DailyGoal = dailyGoal;
            this.Divider = divider;
            this.CustomCssStyling = customCssStyling;
        }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets DailyGoal
        /// </summary>
        [DataMember(Name = "dailyGoal", EmitDefaultValue = false)]
        public int DailyGoal { get; set; }

        /// <summary>
        /// Gets or Sets Divider
        /// </summary>
        [DataMember(Name = "divider", EmitDefaultValue = true)]
        public string Divider { get; set; }

        /// <summary>
        /// Gets or Sets CustomCssStyling
        /// </summary>
        [DataMember(Name = "customCssStyling", EmitDefaultValue = true)]
        public string CustomCssStyling { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostFollowerGoalDto {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  DailyGoal: ").Append(DailyGoal).Append("\n");
            sb.Append("  Divider: ").Append(Divider).Append("\n");
            sb.Append("  CustomCssStyling: ").Append(CustomCssStyling).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostFollowerGoalDto);
        }

        /// <summary>
        /// Returns true if PostFollowerGoalDto instances are equal
        /// </summary>
        /// <param name="input">Instance of PostFollowerGoalDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostFollowerGoalDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.DailyGoal == input.DailyGoal ||
                    this.DailyGoal.Equals(input.DailyGoal)
                ) && 
                (
                    this.Divider == input.Divider ||
                    (this.Divider != null &&
                    this.Divider.Equals(input.Divider))
                ) && 
                (
                    this.CustomCssStyling == input.CustomCssStyling ||
                    (this.CustomCssStyling != null &&
                    this.CustomCssStyling.Equals(input.CustomCssStyling))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DailyGoal.GetHashCode();
                if (this.Divider != null)
                {
                    hashCode = (hashCode * 59) + this.Divider.GetHashCode();
                }
                if (this.CustomCssStyling != null)
                {
                    hashCode = (hashCode * 59) + this.CustomCssStyling.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
