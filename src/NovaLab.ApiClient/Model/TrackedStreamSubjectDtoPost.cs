/*
 * NovaLab API
 *
 * An ASP.NET Core Web API for managing your streams
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = NovaLab.ApiClient.Client.OpenAPIDateConverter;

namespace NovaLab.ApiClient.Model
{
    /// <summary>
    /// TrackedStreamSubjectDtoPost
    /// </summary>
    [DataContract(Name = "TrackedStreamSubjectDtoPost")]
    public partial class TrackedStreamSubjectDtoPost : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedStreamSubjectDtoPost" /> class.
        /// </summary>
        /// <param name="novaLabUserId">novaLabUserId.</param>
        /// <param name="twitchTitle">twitchTitle.</param>
        /// <param name="twitchBroadcastLanguage">twitchBroadcastLanguage.</param>
        /// <param name="twitchTags">twitchTags.</param>
        /// <param name="twitchGameId">twitchGameId.</param>
        public TrackedStreamSubjectDtoPost(Guid novaLabUserId = default(Guid), string twitchTitle = default(string), string twitchBroadcastLanguage = default(string), List<string> twitchTags = default(List<string>), string twitchGameId = default(string))
        {
            this.NovaLabUserId = novaLabUserId;
            this.TwitchTitle = twitchTitle;
            this.TwitchBroadcastLanguage = twitchBroadcastLanguage;
            this.TwitchTags = twitchTags;
            this.TwitchGameId = twitchGameId;
        }

        /// <summary>
        /// Gets or Sets NovaLabUserId
        /// </summary>
        [DataMember(Name = "novaLabUserId", EmitDefaultValue = false)]
        public Guid NovaLabUserId { get; set; }

        /// <summary>
        /// Gets or Sets TwitchTitle
        /// </summary>
        [DataMember(Name = "twitchTitle", EmitDefaultValue = true)]
        public string TwitchTitle { get; set; }

        /// <summary>
        /// Gets or Sets TwitchBroadcastLanguage
        /// </summary>
        [DataMember(Name = "twitchBroadcastLanguage", EmitDefaultValue = true)]
        public string TwitchBroadcastLanguage { get; set; }

        /// <summary>
        /// Gets or Sets TwitchTags
        /// </summary>
        [DataMember(Name = "twitchTags", EmitDefaultValue = true)]
        public List<string> TwitchTags { get; set; }

        /// <summary>
        /// Gets or Sets TwitchGameId
        /// </summary>
        [DataMember(Name = "twitchGameId", EmitDefaultValue = true)]
        public string TwitchGameId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedStreamSubjectDtoPost {\n");
            sb.Append("  NovaLabUserId: ").Append(NovaLabUserId).Append("\n");
            sb.Append("  TwitchTitle: ").Append(TwitchTitle).Append("\n");
            sb.Append("  TwitchBroadcastLanguage: ").Append(TwitchBroadcastLanguage).Append("\n");
            sb.Append("  TwitchTags: ").Append(TwitchTags).Append("\n");
            sb.Append("  TwitchGameId: ").Append(TwitchGameId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
