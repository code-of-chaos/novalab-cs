/*
 * NovaLab API
 *
 * An ASP.NET Core Web API for managing your streams
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = NovaLab.ApiClient.Client.OpenAPIDateConverter;

namespace NovaLab.ApiClient.Model
{
    /// <summary>
    /// PostManagedRewardDto
    /// </summary>
    [DataContract(Name = "PostManagedRewardDto")]
    public partial class PostManagedRewardDto : IEquatable<PostManagedRewardDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostManagedRewardDto" /> class.
        /// </summary>
        /// <param name="userId">userId.</param>
        /// <param name="twitchApiRequest">twitchApiRequest.</param>
        /// <param name="outputTemplatePerReward">outputTemplatePerReward.</param>
        /// <param name="outputTemplatePerRedemption">outputTemplatePerRedemption.</param>
        public PostManagedRewardDto(string userId = default(string), CreateCustomRewardsRequest twitchApiRequest = default(CreateCustomRewardsRequest), string outputTemplatePerReward = default(string), string outputTemplatePerRedemption = default(string))
        {
            this.UserId = userId;
            this.TwitchApiRequest = twitchApiRequest;
            this.OutputTemplatePerReward = outputTemplatePerReward;
            this.OutputTemplatePerRedemption = outputTemplatePerRedemption;
        }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets TwitchApiRequest
        /// </summary>
        [DataMember(Name = "twitchApiRequest", EmitDefaultValue = false)]
        public CreateCustomRewardsRequest TwitchApiRequest { get; set; }

        /// <summary>
        /// Gets or Sets OutputTemplatePerReward
        /// </summary>
        [DataMember(Name = "outputTemplatePerReward", EmitDefaultValue = true)]
        public string OutputTemplatePerReward { get; set; }

        /// <summary>
        /// Gets or Sets OutputTemplatePerRedemption
        /// </summary>
        [DataMember(Name = "outputTemplatePerRedemption", EmitDefaultValue = true)]
        public string OutputTemplatePerRedemption { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostManagedRewardDto {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  TwitchApiRequest: ").Append(TwitchApiRequest).Append("\n");
            sb.Append("  OutputTemplatePerReward: ").Append(OutputTemplatePerReward).Append("\n");
            sb.Append("  OutputTemplatePerRedemption: ").Append(OutputTemplatePerRedemption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostManagedRewardDto);
        }

        /// <summary>
        /// Returns true if PostManagedRewardDto instances are equal
        /// </summary>
        /// <param name="input">Instance of PostManagedRewardDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostManagedRewardDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.TwitchApiRequest == input.TwitchApiRequest ||
                    (this.TwitchApiRequest != null &&
                    this.TwitchApiRequest.Equals(input.TwitchApiRequest))
                ) && 
                (
                    this.OutputTemplatePerReward == input.OutputTemplatePerReward ||
                    (this.OutputTemplatePerReward != null &&
                    this.OutputTemplatePerReward.Equals(input.OutputTemplatePerReward))
                ) && 
                (
                    this.OutputTemplatePerRedemption == input.OutputTemplatePerRedemption ||
                    (this.OutputTemplatePerRedemption != null &&
                    this.OutputTemplatePerRedemption.Equals(input.OutputTemplatePerRedemption))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.TwitchApiRequest != null)
                {
                    hashCode = (hashCode * 59) + this.TwitchApiRequest.GetHashCode();
                }
                if (this.OutputTemplatePerReward != null)
                {
                    hashCode = (hashCode * 59) + this.OutputTemplatePerReward.GetHashCode();
                }
                if (this.OutputTemplatePerRedemption != null)
                {
                    hashCode = (hashCode * 59) + this.OutputTemplatePerRedemption.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
