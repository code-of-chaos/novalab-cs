/*
 * NovaLab API
 *
 * An ASP.NET Core Web API for managing your streams
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = NovaLab.ApiClient.Client.OpenAPIDateConverter;

namespace NovaLab.ApiClient.Model
{
    /// <summary>
    /// TwitchManagedStreamSubjectDto
    /// </summary>
    [DataContract(Name = "TwitchManagedStreamSubjectDto")]
    public partial class TwitchManagedStreamSubjectDto : IEquatable<TwitchManagedStreamSubjectDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TwitchManagedStreamSubjectDto" /> class.
        /// </summary>
        /// <param name="selectionName">selectionName.</param>
        /// <param name="obsSubjectTitle">obsSubjectTitle.</param>
        /// <param name="twitchSubjectTitle">twitchSubjectTitle.</param>
        public TwitchManagedStreamSubjectDto(string selectionName = default(string), string obsSubjectTitle = default(string), string twitchSubjectTitle = default(string))
        {
            this.SelectionName = selectionName;
            this.ObsSubjectTitle = obsSubjectTitle;
            this.TwitchSubjectTitle = twitchSubjectTitle;
        }

        /// <summary>
        /// Gets or Sets SelectionName
        /// </summary>
        [DataMember(Name = "selectionName", EmitDefaultValue = true)]
        public string SelectionName { get; set; }

        /// <summary>
        /// Gets or Sets ObsSubjectTitle
        /// </summary>
        [DataMember(Name = "obsSubjectTitle", EmitDefaultValue = true)]
        public string ObsSubjectTitle { get; set; }

        /// <summary>
        /// Gets or Sets TwitchSubjectTitle
        /// </summary>
        [DataMember(Name = "twitchSubjectTitle", EmitDefaultValue = true)]
        public string TwitchSubjectTitle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TwitchManagedStreamSubjectDto {\n");
            sb.Append("  SelectionName: ").Append(SelectionName).Append("\n");
            sb.Append("  ObsSubjectTitle: ").Append(ObsSubjectTitle).Append("\n");
            sb.Append("  TwitchSubjectTitle: ").Append(TwitchSubjectTitle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TwitchManagedStreamSubjectDto);
        }

        /// <summary>
        /// Returns true if TwitchManagedStreamSubjectDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TwitchManagedStreamSubjectDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TwitchManagedStreamSubjectDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SelectionName == input.SelectionName ||
                    (this.SelectionName != null &&
                    this.SelectionName.Equals(input.SelectionName))
                ) && 
                (
                    this.ObsSubjectTitle == input.ObsSubjectTitle ||
                    (this.ObsSubjectTitle != null &&
                    this.ObsSubjectTitle.Equals(input.ObsSubjectTitle))
                ) && 
                (
                    this.TwitchSubjectTitle == input.TwitchSubjectTitle ||
                    (this.TwitchSubjectTitle != null &&
                    this.TwitchSubjectTitle.Equals(input.TwitchSubjectTitle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SelectionName != null)
                {
                    hashCode = (hashCode * 59) + this.SelectionName.GetHashCode();
                }
                if (this.ObsSubjectTitle != null)
                {
                    hashCode = (hashCode * 59) + this.ObsSubjectTitle.GetHashCode();
                }
                if (this.TwitchSubjectTitle != null)
                {
                    hashCode = (hashCode * 59) + this.TwitchSubjectTitle.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
