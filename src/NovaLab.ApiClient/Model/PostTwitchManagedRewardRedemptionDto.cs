/*
 * NovaLab API
 *
 * An ASP.NET Core Web API for managing your streams
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = NovaLab.ApiClient.Client.OpenAPIDateConverter;

namespace NovaLab.ApiClient.Model
{
    /// <summary>
    /// PostTwitchManagedRewardRedemptionDto
    /// </summary>
    [DataContract(Name = "PostTwitchManagedRewardRedemptionDto")]
    public partial class PostTwitchManagedRewardRedemptionDto : IEquatable<PostTwitchManagedRewardRedemptionDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostTwitchManagedRewardRedemptionDto" /> class.
        /// </summary>
        /// <param name="twitchRewardId">twitchRewardId.</param>
        /// <param name="userName">userName.</param>
        /// <param name="message">message.</param>
        public PostTwitchManagedRewardRedemptionDto(string twitchRewardId = default(string), string userName = default(string), string message = default(string))
        {
            this.TwitchRewardId = twitchRewardId;
            this.UserName = userName;
            this.Message = message;
        }

        /// <summary>
        /// Gets or Sets TwitchRewardId
        /// </summary>
        [DataMember(Name = "twitchRewardId", EmitDefaultValue = true)]
        public string TwitchRewardId { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name = "userName", EmitDefaultValue = true)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostTwitchManagedRewardRedemptionDto {\n");
            sb.Append("  TwitchRewardId: ").Append(TwitchRewardId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostTwitchManagedRewardRedemptionDto);
        }

        /// <summary>
        /// Returns true if PostTwitchManagedRewardRedemptionDto instances are equal
        /// </summary>
        /// <param name="input">Instance of PostTwitchManagedRewardRedemptionDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostTwitchManagedRewardRedemptionDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TwitchRewardId == input.TwitchRewardId ||
                    (this.TwitchRewardId != null &&
                    this.TwitchRewardId.Equals(input.TwitchRewardId))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TwitchRewardId != null)
                {
                    hashCode = (hashCode * 59) + this.TwitchRewardId.GetHashCode();
                }
                if (this.UserName != null)
                {
                    hashCode = (hashCode * 59) + this.UserName.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
