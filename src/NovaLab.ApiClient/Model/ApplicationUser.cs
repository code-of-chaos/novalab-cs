/*
 * NovaLab API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace NovaLab.ApiClient.Model;

/// <summary>
///     ApplicationUser
/// </summary>
[DataContract(Name = "ApplicationUser")]
public class ApplicationUser : IEquatable<ApplicationUser>, IValidatableObject {
    /// <summary>
    ///     Initializes a new instance of the <see cref="ApplicationUser" /> class.
    /// </summary>
    /// <param name="id">id.</param>
    /// <param name="userName">userName.</param>
    /// <param name="normalizedUserName">normalizedUserName.</param>
    /// <param name="email">email.</param>
    /// <param name="normalizedEmail">normalizedEmail.</param>
    /// <param name="emailConfirmed">emailConfirmed.</param>
    /// <param name="passwordHash">passwordHash.</param>
    /// <param name="securityStamp">securityStamp.</param>
    /// <param name="concurrencyStamp">concurrencyStamp.</param>
    /// <param name="phoneNumber">phoneNumber.</param>
    /// <param name="phoneNumberConfirmed">phoneNumberConfirmed.</param>
    /// <param name="twoFactorEnabled">twoFactorEnabled.</param>
    /// <param name="lockoutEnd">lockoutEnd.</param>
    /// <param name="lockoutEnabled">lockoutEnabled.</param>
    /// <param name="accessFailedCount">accessFailedCount.</param>
    /// <param name="twitchBroadcasterId">twitchBroadcasterId.</param>
    /// <param name="twitchAccessToken">twitchAccessToken.</param>
    public ApplicationUser(string id = default, string userName = default, string normalizedUserName = default, string email = default, string normalizedEmail = default, bool emailConfirmed = default, string passwordHash = default, string securityStamp = default, string concurrencyStamp = default, string phoneNumber = default, bool phoneNumberConfirmed = default, bool twoFactorEnabled = default, DateTime? lockoutEnd = default, bool lockoutEnabled = default, int accessFailedCount = default, string twitchBroadcasterId = default, string twitchAccessToken = default) {
        Id = id;
        UserName = userName;
        NormalizedUserName = normalizedUserName;
        Email = email;
        NormalizedEmail = normalizedEmail;
        EmailConfirmed = emailConfirmed;
        PasswordHash = passwordHash;
        SecurityStamp = securityStamp;
        ConcurrencyStamp = concurrencyStamp;
        PhoneNumber = phoneNumber;
        PhoneNumberConfirmed = phoneNumberConfirmed;
        TwoFactorEnabled = twoFactorEnabled;
        LockoutEnd = lockoutEnd;
        LockoutEnabled = lockoutEnabled;
        AccessFailedCount = accessFailedCount;
        TwitchBroadcasterId = twitchBroadcasterId;
        TwitchAccessToken = twitchAccessToken;
    }

    /// <summary>
    ///     Gets or Sets Id
    /// </summary>
    [DataMember(Name = "id", EmitDefaultValue = true)]
    public string Id { get; set; }

    /// <summary>
    ///     Gets or Sets UserName
    /// </summary>
    [DataMember(Name = "userName", EmitDefaultValue = true)]
    public string UserName { get; set; }

    /// <summary>
    ///     Gets or Sets NormalizedUserName
    /// </summary>
    [DataMember(Name = "normalizedUserName", EmitDefaultValue = true)]
    public string NormalizedUserName { get; set; }

    /// <summary>
    ///     Gets or Sets Email
    /// </summary>
    [DataMember(Name = "email", EmitDefaultValue = true)]
    public string Email { get; set; }

    /// <summary>
    ///     Gets or Sets NormalizedEmail
    /// </summary>
    [DataMember(Name = "normalizedEmail", EmitDefaultValue = true)]
    public string NormalizedEmail { get; set; }

    /// <summary>
    ///     Gets or Sets EmailConfirmed
    /// </summary>
    [DataMember(Name = "emailConfirmed", EmitDefaultValue = true)]
    public bool EmailConfirmed { get; set; }

    /// <summary>
    ///     Gets or Sets PasswordHash
    /// </summary>
    [DataMember(Name = "passwordHash", EmitDefaultValue = true)]
    public string PasswordHash { get; set; }

    /// <summary>
    ///     Gets or Sets SecurityStamp
    /// </summary>
    [DataMember(Name = "securityStamp", EmitDefaultValue = true)]
    public string SecurityStamp { get; set; }

    /// <summary>
    ///     Gets or Sets ConcurrencyStamp
    /// </summary>
    [DataMember(Name = "concurrencyStamp", EmitDefaultValue = true)]
    public string ConcurrencyStamp { get; set; }

    /// <summary>
    ///     Gets or Sets PhoneNumber
    /// </summary>
    [DataMember(Name = "phoneNumber", EmitDefaultValue = true)]
    public string PhoneNumber { get; set; }

    /// <summary>
    ///     Gets or Sets PhoneNumberConfirmed
    /// </summary>
    [DataMember(Name = "phoneNumberConfirmed", EmitDefaultValue = true)]
    public bool PhoneNumberConfirmed { get; set; }

    /// <summary>
    ///     Gets or Sets TwoFactorEnabled
    /// </summary>
    [DataMember(Name = "twoFactorEnabled", EmitDefaultValue = true)]
    public bool TwoFactorEnabled { get; set; }

    /// <summary>
    ///     Gets or Sets LockoutEnd
    /// </summary>
    [DataMember(Name = "lockoutEnd", EmitDefaultValue = true)]
    public DateTime? LockoutEnd { get; set; }

    /// <summary>
    ///     Gets or Sets LockoutEnabled
    /// </summary>
    [DataMember(Name = "lockoutEnabled", EmitDefaultValue = true)]
    public bool LockoutEnabled { get; set; }

    /// <summary>
    ///     Gets or Sets AccessFailedCount
    /// </summary>
    [DataMember(Name = "accessFailedCount", EmitDefaultValue = false)]
    public int AccessFailedCount { get; set; }

    /// <summary>
    ///     Gets or Sets TwitchBroadcasterId
    /// </summary>
    [DataMember(Name = "twitchBroadcasterId", EmitDefaultValue = true)]
    public string TwitchBroadcasterId { get; set; }

    /// <summary>
    ///     Gets or Sets TwitchAccessToken
    /// </summary>
    [DataMember(Name = "twitchAccessToken", EmitDefaultValue = true)]
    public string TwitchAccessToken { get; set; }

    /// <summary>
    ///     Returns true if ApplicationUser instances are equal
    /// </summary>
    /// <param name="input">Instance of ApplicationUser to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(ApplicationUser input) {
        if (input == null) {
            return false;
        }
        return
            (
                Id == input.Id ||
                Id != null &&
                Id.Equals(input.Id)
            ) &&
            (
                UserName == input.UserName ||
                UserName != null &&
                UserName.Equals(input.UserName)
            ) &&
            (
                NormalizedUserName == input.NormalizedUserName ||
                NormalizedUserName != null &&
                NormalizedUserName.Equals(input.NormalizedUserName)
            ) &&
            (
                Email == input.Email ||
                Email != null &&
                Email.Equals(input.Email)
            ) &&
            (
                NormalizedEmail == input.NormalizedEmail ||
                NormalizedEmail != null &&
                NormalizedEmail.Equals(input.NormalizedEmail)
            ) &&
            (
                EmailConfirmed == input.EmailConfirmed ||
                EmailConfirmed.Equals(input.EmailConfirmed)
            ) &&
            (
                PasswordHash == input.PasswordHash ||
                PasswordHash != null &&
                PasswordHash.Equals(input.PasswordHash)
            ) &&
            (
                SecurityStamp == input.SecurityStamp ||
                SecurityStamp != null &&
                SecurityStamp.Equals(input.SecurityStamp)
            ) &&
            (
                ConcurrencyStamp == input.ConcurrencyStamp ||
                ConcurrencyStamp != null &&
                ConcurrencyStamp.Equals(input.ConcurrencyStamp)
            ) &&
            (
                PhoneNumber == input.PhoneNumber ||
                PhoneNumber != null &&
                PhoneNumber.Equals(input.PhoneNumber)
            ) &&
            (
                PhoneNumberConfirmed == input.PhoneNumberConfirmed ||
                PhoneNumberConfirmed.Equals(input.PhoneNumberConfirmed)
            ) &&
            (
                TwoFactorEnabled == input.TwoFactorEnabled ||
                TwoFactorEnabled.Equals(input.TwoFactorEnabled)
            ) &&
            (
                LockoutEnd == input.LockoutEnd ||
                LockoutEnd != null &&
                LockoutEnd.Equals(input.LockoutEnd)
            ) &&
            (
                LockoutEnabled == input.LockoutEnabled ||
                LockoutEnabled.Equals(input.LockoutEnabled)
            ) &&
            (
                AccessFailedCount == input.AccessFailedCount ||
                AccessFailedCount.Equals(input.AccessFailedCount)
            ) &&
            (
                TwitchBroadcasterId == input.TwitchBroadcasterId ||
                TwitchBroadcasterId != null &&
                TwitchBroadcasterId.Equals(input.TwitchBroadcasterId)
            ) &&
            (
                TwitchAccessToken == input.TwitchAccessToken ||
                TwitchAccessToken != null &&
                TwitchAccessToken.Equals(input.TwitchAccessToken)
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext) {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString() {
        var sb = new StringBuilder();
        sb.Append("class ApplicationUser {\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  UserName: ").Append(UserName).Append("\n");
        sb.Append("  NormalizedUserName: ").Append(NormalizedUserName).Append("\n");
        sb.Append("  Email: ").Append(Email).Append("\n");
        sb.Append("  NormalizedEmail: ").Append(NormalizedEmail).Append("\n");
        sb.Append("  EmailConfirmed: ").Append(EmailConfirmed).Append("\n");
        sb.Append("  PasswordHash: ").Append(PasswordHash).Append("\n");
        sb.Append("  SecurityStamp: ").Append(SecurityStamp).Append("\n");
        sb.Append("  ConcurrencyStamp: ").Append(ConcurrencyStamp).Append("\n");
        sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
        sb.Append("  PhoneNumberConfirmed: ").Append(PhoneNumberConfirmed).Append("\n");
        sb.Append("  TwoFactorEnabled: ").Append(TwoFactorEnabled).Append("\n");
        sb.Append("  LockoutEnd: ").Append(LockoutEnd).Append("\n");
        sb.Append("  LockoutEnabled: ").Append(LockoutEnabled).Append("\n");
        sb.Append("  AccessFailedCount: ").Append(AccessFailedCount).Append("\n");
        sb.Append("  TwitchBroadcasterId: ").Append(TwitchBroadcasterId).Append("\n");
        sb.Append("  TwitchAccessToken: ").Append(TwitchAccessToken).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input) => Equals(input as ApplicationUser);

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode() {
        unchecked// Overflow is fine, just wrap
        {
            int hashCode = 41;
            if (Id != null) {
                hashCode = hashCode * 59 + Id.GetHashCode();
            }
            if (UserName != null) {
                hashCode = hashCode * 59 + UserName.GetHashCode();
            }
            if (NormalizedUserName != null) {
                hashCode = hashCode * 59 + NormalizedUserName.GetHashCode();
            }
            if (Email != null) {
                hashCode = hashCode * 59 + Email.GetHashCode();
            }
            if (NormalizedEmail != null) {
                hashCode = hashCode * 59 + NormalizedEmail.GetHashCode();
            }
            hashCode = hashCode * 59 + EmailConfirmed.GetHashCode();
            if (PasswordHash != null) {
                hashCode = hashCode * 59 + PasswordHash.GetHashCode();
            }
            if (SecurityStamp != null) {
                hashCode = hashCode * 59 + SecurityStamp.GetHashCode();
            }
            if (ConcurrencyStamp != null) {
                hashCode = hashCode * 59 + ConcurrencyStamp.GetHashCode();
            }
            if (PhoneNumber != null) {
                hashCode = hashCode * 59 + PhoneNumber.GetHashCode();
            }
            hashCode = hashCode * 59 + PhoneNumberConfirmed.GetHashCode();
            hashCode = hashCode * 59 + TwoFactorEnabled.GetHashCode();
            if (LockoutEnd != null) {
                hashCode = hashCode * 59 + LockoutEnd.GetHashCode();
            }
            hashCode = hashCode * 59 + LockoutEnabled.GetHashCode();
            hashCode = hashCode * 59 + AccessFailedCount.GetHashCode();
            if (TwitchBroadcasterId != null) {
                hashCode = hashCode * 59 + TwitchBroadcasterId.GetHashCode();
            }
            if (TwitchAccessToken != null) {
                hashCode = hashCode * 59 + TwitchAccessToken.GetHashCode();
            }
            return hashCode;
        }
    }
}
