/*
 * NovaLab API
 *
 * An ASP.NET Core Web API for managing your streams
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace NovaLab.ApiClient.Model;

/// <summary>
///     TwitchManagedRewardRedemption
/// </summary>
[DataContract(Name = "TwitchManagedRewardRedemption")]
public class TwitchManagedRewardRedemption : IEquatable<TwitchManagedRewardRedemption>, IValidatableObject {
    /// <summary>
    ///     Initializes a new instance of the <see cref="TwitchManagedRewardRedemption" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected TwitchManagedRewardRedemption() {}
    /// <summary>
    ///     Initializes a new instance of the <see cref="TwitchManagedRewardRedemption" /> class.
    /// </summary>
    /// <param name="id">id.</param>
    /// <param name="twitchManagedReward">twitchManagedReward (required).</param>
    /// <param name="timeStamp">timeStamp.</param>
    /// <param name="username">username (required).</param>
    /// <param name="message">message.</param>
    public TwitchManagedRewardRedemption(Guid id = default, TwitchManagedReward twitchManagedReward = default, DateTime timeStamp = default, string username = default, string message = default) {
        // to ensure "twitchManagedReward" is required (not null)
        if (twitchManagedReward == null) {
            throw new ArgumentNullException("twitchManagedReward is a required property for TwitchManagedRewardRedemption and cannot be null");
        }
        TwitchManagedReward = twitchManagedReward;
        // to ensure "username" is required (not null)
        if (username == null) {
            throw new ArgumentNullException("username is a required property for TwitchManagedRewardRedemption and cannot be null");
        }
        Username = username;
        Id = id;
        TimeStamp = timeStamp;
        Message = message;
    }

    /// <summary>
    ///     Gets or Sets Id
    /// </summary>
    [DataMember(Name = "id", EmitDefaultValue = false)]
    public Guid Id { get; set; }

    /// <summary>
    ///     Gets or Sets TwitchManagedReward
    /// </summary>
    [DataMember(Name = "twitchManagedReward", IsRequired = true, EmitDefaultValue = true)]
    public TwitchManagedReward TwitchManagedReward { get; set; }

    /// <summary>
    ///     Gets or Sets TimeStamp
    /// </summary>
    [DataMember(Name = "timeStamp", EmitDefaultValue = false)]
    public DateTime TimeStamp { get; set; }

    /// <summary>
    ///     Gets or Sets Username
    /// </summary>
    [DataMember(Name = "username", IsRequired = true, EmitDefaultValue = true)]
    public string Username { get; set; }

    /// <summary>
    ///     Gets or Sets Message
    /// </summary>
    [DataMember(Name = "message", EmitDefaultValue = true)]
    public string Message { get; set; }

    /// <summary>
    ///     Returns true if TwitchManagedRewardRedemption instances are equal
    /// </summary>
    /// <param name="input">Instance of TwitchManagedRewardRedemption to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(TwitchManagedRewardRedemption input) {
        if (input == null) {
            return false;
        }
        return
            (
                Id == input.Id ||
                Id != null &&
                Id.Equals(input.Id)
            ) &&
            (
                TwitchManagedReward == input.TwitchManagedReward ||
                TwitchManagedReward != null &&
                TwitchManagedReward.Equals(input.TwitchManagedReward)
            ) &&
            (
                TimeStamp == input.TimeStamp ||
                TimeStamp != null &&
                TimeStamp.Equals(input.TimeStamp)
            ) &&
            (
                Username == input.Username ||
                Username != null &&
                Username.Equals(input.Username)
            ) &&
            (
                Message == input.Message ||
                Message != null &&
                Message.Equals(input.Message)
            );
    }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext) {
        // Username (string) maxLength
        if (Username != null && Username.Length > 128) {
            yield return new ValidationResult("Invalid value for Username, length must be less than 128.", new[] { "Username" });
        }

        // Username (string) minLength
        if (Username != null && Username.Length < 1) {
            yield return new ValidationResult("Invalid value for Username, length must be greater than 1.", new[] { "Username" });
        }

        // Message (string) maxLength
        if (Message != null && Message.Length > 255) {
            yield return new ValidationResult("Invalid value for Message, length must be less than 255.", new[] { "Message" });
        }

    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString() {
        var sb = new StringBuilder();
        sb.Append("class TwitchManagedRewardRedemption {\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  TwitchManagedReward: ").Append(TwitchManagedReward).Append("\n");
        sb.Append("  TimeStamp: ").Append(TimeStamp).Append("\n");
        sb.Append("  Username: ").Append(Username).Append("\n");
        sb.Append("  Message: ").Append(Message).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input) => Equals(input as TwitchManagedRewardRedemption);

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode() {
        unchecked// Overflow is fine, just wrap
        {
            int hashCode = 41;
            if (Id != null) {
                hashCode = hashCode * 59 + Id.GetHashCode();
            }
            if (TwitchManagedReward != null) {
                hashCode = hashCode * 59 + TwitchManagedReward.GetHashCode();
            }
            if (TimeStamp != null) {
                hashCode = hashCode * 59 + TimeStamp.GetHashCode();
            }
            if (Username != null) {
                hashCode = hashCode * 59 + Username.GetHashCode();
            }
            if (Message != null) {
                hashCode = hashCode * 59 + Message.GetHashCode();
            }
            return hashCode;
        }
    }
}
