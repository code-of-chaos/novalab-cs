@page "/followergoal/{FollowerGoalId:guid}"
@layout NullLayout

@using NovaLab.ApiClient.Api
@using NovaLab.ApiClient.Model
@using NovaLab.Components.Layout
@using NovaLab.Services.Twitch.Hubs

@rendermode InteractiveServer
@attribute [StreamRendering]

@inject NavigationManager NavigationManager
@inject TwitchHubClient TwitchHubClient

<style>
    .box {
        display: flex;
        justify-content: center;
        align-items: center;
    }
    .counter {
        font-size: @(FontSize)rem;
    }
</style>

<div class="box">
    <p class="counter" style="@CustomStyling">@CurrentCount@Divider@Goal</p>
</div>

@code {
    [Parameter]
    public Guid FollowerGoalId { get; set; }
    
    private TwitchFollowerGoalApi? _followerGoalApi;
    private TwitchFollowerGoalApi FollowerGoalApi => _followerGoalApi ??= new TwitchFollowerGoalApi(NavigationManager.BaseUri);
    
    private TwitchNewFollowerApi? _newFollowerApi;
    private TwitchNewFollowerApi NewFollowerApi => _newFollowerApi ??= new TwitchNewFollowerApi(NavigationManager.BaseUri);
    
    private int CurrentCount { get; set; }
    private string Divider { get; set; } = "";
    private int Goal { get; set; }
    private string CustomStyling = "";

    private int FontSize { get; set; } = 10;
    
    // -----------------------------------------------------------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------------------------------------------------------
    protected override async Task OnInitializedAsync() {
        FollowerGoalDtoApiResult result = await FollowerGoalApi.GetFollowerGoalsAsync(goalIds:[FollowerGoalId]);
        FollowerGoalDto followerGoal = result.Data.First();

        NewFollowerDtoApiResult resultAlreadyFollowed = await NewFollowerApi.GetNewFollowersAsync(goalId: followerGoal.GoalId, fromDate: DateTime.Today);
        List<NewFollowerDto> newFollows = resultAlreadyFollowed.Data;

        CurrentCount = newFollows.Count;
        Divider = followerGoal.Divider;
        Goal = followerGoal.DailyGoalAmount;
        CustomStyling = followerGoal.CustomCssStyling;
        
        TwitchHubClient.OnNewTwitchFollower(() => {
            CurrentCount += 1;
            FontSize = 10 * (1 / CurrentCount.ToString().Length);
            _ = InvokeAsync(StateHasChanged);
        });
        
        await TwitchHubClient.StartAsync(userId:followerGoal.UserId);
        _ = InvokeAsync(StateHasChanged);
    }    
    
    // Ensure to stop the connection when the component is being disposed
    private async ValueTask DisposeAsync() {
        await TwitchHubClient.DisposeAsync();
    }
}