@page "/Account/ExternalLogin"
@layout NullLayout

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using NovaLab.Components.Layout
@using NovaLab.Services.Twitch.TwitchTokens
@using NovaLab.Data

@inject SignInManager<NovaLabUser> SignInManager
@inject UserManager<NovaLabUser> UserManager
@inject IUserStore<NovaLabUser> UserStore
@inject IEmailSender<NovaLabUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogin> Logger
@inject TwitchTokensManager TwitchTokensManager

<PageTitle>Register</PageTitle>

<StatusMessage Message="@message"/>
<h1>Register</h1>
<h2>Associate your @ProviderDisplayName account.</h2>
<hr/>

<div class="alert alert-info">
    You've successfully authenticated with <strong>@ProviderDisplayName</strong>.
    Please enter an email address for this site below and click the Register button to finish
    logging in.
</div>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="confirmation" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="email" placeholder="Please enter your email."/>
                <label for="email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@code {
    public const string LoginCallbackAction = "LoginCallback";

    private string? message;
    private ExternalLoginInfo externalLoginInfo = default!;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? RemoteError { get; set; }

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery] private string? Action { get; set; }

    private string? ProviderDisplayName => externalLoginInfo.ProviderDisplayName;

    protected override async Task OnInitializedAsync() {
        // Variable to hold the redirect path and status message
        string? redirectPath = null;
        string? statusMessage = null;

        if (RemoteError is not null) {
            redirectPath = "Account/Login";
            statusMessage = $"Error from external provider: {RemoteError}";
        }

        ExternalLoginInfo? info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null) {
            redirectPath = "Account/Login";
            statusMessage = "Error loading external login information.";
        }

        if (redirectPath != null && statusMessage != null) {
            RedirectManager.RedirectToWithStatus(redirectPath, statusMessage, HttpContext);
            return;
        }

        externalLoginInfo = info;

        if (HttpMethods.IsGet(HttpContext.Request.Method)) {
            if (Action == LoginCallbackAction) {
                await OnLoginCallbackAsync();
                return;
            }

            // We should only reach this page via the login callback, so redirect back to
            // the login page if we get here some other way.
            RedirectManager.RedirectTo("Account/Login");
        }
    }

    private async Task OnLoginCallbackAsync() {
        // Variable to hold the redirect path
        string? redirectPath = null;

        // Sign in the user with this external login provider if the user already has a login.
        SignInResult result = await SignInManager.ExternalLoginSignInAsync(
            externalLoginInfo.LoginProvider,
            externalLoginInfo.ProviderKey,
            isPersistent: false,
            bypassTwoFactor: true
        );

        if (result.Succeeded) {
            Logger.LogInformation(
            "{Name} logged in with {LoginProvider} provider.",
            externalLoginInfo.Principal.Identity?.Name,
            externalLoginInfo.LoginProvider);
    
            // Fetch the user
            NovaLabUser? user = await UserManager.FindByLoginAsync(externalLoginInfo.LoginProvider, externalLoginInfo.ProviderKey);
    
            // Update user tokens on each successful login
            if (user != null && externalLoginInfo.AuthenticationTokens != null)
                await TwitchTokensManager.IngestTokensWithUserManager(user.Id, externalLoginInfo.AuthenticationTokens);

            // Assign correct redirectPath instead of redirecting immediately
            redirectPath = ReturnUrl;
        }
    
        if (result.IsLockedOut) {
            // Assign correct redirectPath instead of redirecting immediately
            redirectPath = "Account/Lockout";
        }

        // Only here at the end, perform the redirect        
        if (redirectPath != null) {
            RedirectManager.RedirectTo(redirectPath);
        }
    }

    private async Task OnValidSubmitAsync() {
        IUserEmailStore<NovaLabUser> emailStore = GetEmailStore();
        NovaLabUser user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        IdentityResult result = await UserManager.CreateAsync(user);
        ExternalLoginInfo? info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null) {
            message = "Error loading external login information during confirmation.";
            return;
        }
        
        if (result.Succeeded) {
            result = await UserManager.AddLoginAsync(user, externalLoginInfo);
            if (result.Succeeded) {
                Logger.LogInformation("User created an account using {Name} provider.", externalLoginInfo.LoginProvider);
                
                // Add extra information about the user from claims
                user.TwitchBroadcasterId = info.Principal.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? null;
                
                // THis should store the tokens to AspNetUserTokens table?
                if (info.AuthenticationTokens != null) 
                    await TwitchTokensManager.IngestTokensWithUserManager(user.Id, info.AuthenticationTokens);
                
                // Update the user in one go
                await UserStore.UpdateAsync(user, CancellationToken.None);
                
                string userId = await UserManager.GetUserIdAsync(user);
                string code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

                string callbackUrl = NavigationManager.GetUriWithQueryParameters(
                    NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                    new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });
                await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

                // If account confirmation is required, we need to show the link if we don't have a real email sender
                if (UserManager.Options.SignIn.RequireConfirmedAccount) {
                    RedirectManager.RedirectTo("Account/RegisterConfirmation", new Dictionary<string, object?> { ["email"] = Input.Email });
                }

                await SignInManager.SignInAsync(user, isPersistent: false, externalLoginInfo.LoginProvider);
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }

        message = $"Error: {string.Join(",", result.Errors.Select(error => error.Description))}";
    }

    private NovaLabUser CreateUser() {
        try {
            return Activator.CreateInstance<NovaLabUser>();
        }
        catch {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(NovaLabUser)}'. " +
                                                $"Ensure that '{nameof(NovaLabUser)}' is not an abstract class and has a parameterless constructor");
        }
    }

    private IUserEmailStore<NovaLabUser> GetEmailStore() {
        if (!UserManager.SupportsUserEmail) {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<NovaLabUser>)UserStore;
    }

    private sealed class InputModel {
        [Required] [EmailAddress] public string Email { get; set; } = "";
    }

}