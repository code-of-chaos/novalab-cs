@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.SignalR.Client
@using NovaLab.Services.Api
@using NovaLab.Services.Twitch.Hub
@using Serilog
@using NovaLab.ApiClient.Api

@using NovaLab.ApiClient.Model
@using ApplicationUser = NovaLab.Data.ApplicationUser

@attribute [StreamRendering]

@inject HttpClient HttpClient
@inject ILogger logger
@inject NavigationManager NavigationManager
@inject NovaLabApiService apiService
@inject IMessageService MessageService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NovaLabApiService ApiService

<h2>REDEMPTIONS TABLE</h2>
<Table>
    <TableHeader>
        
    </TableHeader>
    <TableFooter></TableFooter>
    
    <TableBody>
        @foreach (TwitchManagedRewardRedemption item in Items) {
            <TableRow>
                <TableCell>@item.Username</TableCell>
                <TableCell>@item.Message</TableCell>
            </TableRow>
        }
    </TableBody>
    
</Table>

@code {
    private List<NovaLab.ApiClient.Model.TwitchManagedRewardRedemption> Items { get; set; } = [];
    private HubConnection? _connection;

    private ApplicationUser? _user;

    private TwitchManagedRewardRedemptionApi? _redemptionApiCache;
    private TwitchManagedRewardRedemptionApi _redemptionApi => _redemptionApiCache ??= new TwitchManagedRewardRedemptionApi(NavigationManager.BaseUri);
    
    // -----------------------------------------------------------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------------------------------------------------------
    protected override async Task OnInitializedAsync() {
        _user = await GetUser();
        await PopulateItems();
        
        // Setup hub connection
        _connection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/twitch"))
            .Build();

        // Listen on the NewManagedRewardRedemption method
        _connection.On<TwitchManagedRewardRedemption>(TwitchHubMethods.NewManagedRewardRedemption, newRecord => {
           
            logger.Warning("CLIENT : {@r}", newRecord);
            
            // Your logic here, for example, adding newRecord to Items list
            Items.Add(newRecord);
    
            // Notify the UI to update
            _ = InvokeAsync(StateHasChanged);
        });

        // Start the connection
        await _connection.StartAsync();

        
    }
    
    // Ensure to stop the connection when the component is being disposed
    public async ValueTask DisposeAsync() {
        if (_connection != null) {
            await _connection.DisposeAsync();
            _connection = null;
        }
    }

    private async Task PopulateItems() {
        if (_user is null) return;

        TwitchManagedRewardRedemptionApiResult result = await _redemptionApi.GetRedemptionsAsync(_user.Id);
        List<TwitchManagedRewardRedemption> items = result.Data;
        Items = items ;
    }
    

    private async Task<ApplicationUser?> GetUser() {
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string userName = authState.User.Identity!.Name!;
        ApplicationUser? user = await UserManager.FindByNameAsync(userName);
        return user!;
    }
}