@using Blazorise.Extensions
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using NovaLab.Data
@using NovaLab.RazorComponents.BlazoriseExtensions
@using NovaLab.Services.Api
@using Serilog
@using TwitchLib.Api.Helix.Models.ChannelPoints.CreateCustomReward

@attribute [StreamRendering]

@inject HttpClient HttpClient
@inject ILogger logger
@inject NavigationManager NavigationManager
@inject NovaLabApiService apiService
@inject IMessageService MessageService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<Row>
    <Column>
        <Validations @ref="@(ValidationsRef)" Mode="ValidationMode.Manual" Model="@CreateCustomRewardsRequestModel" ValidateOnLoad="false">
            <Fields>
                <ValidatedTextEditFormField 
                    FieldLabel="@("Reward's Title")"
                    Validator="@ValidationRule.IsNotEmpty" 
                    @bind-BindValue="@CreateCustomRewardsRequestModel.Title"
                    SizeColumn="@ColumnSize.IsAuto"
                />

                <ValidatedNumericEditFormField
                    FieldLabel="@("Channel Points Cost")"
                    Validator="@ValidationRuleExtensions.IsIntPositiveNonZero"
                    @bind-BindValue="@CreateCustomRewardsRequestModel.Cost"
                    SizeColumn="@ColumnSize.IsAuto"
                />

            </Fields>
        </Validations>

        <Button Color="Color.Primary" Clicked="@OnSaveClicked">
            Validate and Submit
        </Button>


    </Column>
</Row>


@code {
    Validations ValidationsRef { get; set; } = null!;

    CreateCustomRewardsRequest CreateCustomRewardsRequestModel { get; } = new();

    // -----------------------------------------------------------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------------------------------------------------------
    private async Task OnSaveClicked() {
        // if (ValidationsRef is null) {
        //     logger.Error("ValidationsRef was null");
        //     return;
        // }
        
        if (!await ValidationsRef.ValidateAll() ) {
            logger.Warning("Some fields were not validated correctly");
            return;
        }
        logger.Information( "Thank you for filling the form." );
        
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string userName = authState.User.Identity!.Name!;
        ApplicationUser? user = await UserManager.FindByNameAsync(userName);
        string userId = user!.Id;
        
        logger.Warning("client {@e}", CreateCustomRewardsRequestModel);

        var response = await apiService.PostCustomTwitchRedemptions(userId, CreateCustomRewardsRequestModel);
        if (!response.IsNullOrEmpty()) {
            await ValidationsRef.ClearAll();
        }

    }

}
