@using Microsoft.IdentityModel.Tokens
@using NovaLab.Data.Data.Twitch.Redemptions
@using NovaLab.Services.Api
@using Serilog
@using TwitchLib.Api.Helix.Models.ChannelPoints.CreateCustomReward

@inherits ComponentBase

@inject HttpClient Http
@inject ILogger logger
@inject NavigationManager NavigationManager
@inject NovaLabApiService apiService

<div>
    <button @onclick="OnClickCallback">Create New Twitch Redemption</button>
    <button @onclick="Action">A</button>
    <div style="width: 10px; height: 10px; background-color: @Color"></div>
</div>

@code {
    [Parameter]
    public required string UserId { get; set; }

    private string Color { get; set; } = "orange";

    // -----------------------------------------------------------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------------------------------------------------------
    public async Task OnClickCallback() {
        logger.Warning("HELLO THERE");
        try {
            logger.Warning("HELLO THERE");

            TwitchManagedReward[] response = await apiService.PostCustomTwitchRedemptions(UserId, new CreateCustomRewardsRequest {
                Title = "NOVALAB TEST",
                Prompt = null,
                Cost = 1000,
                IsEnabled = true,
                BackgroundColor = null,
                IsUserInputRequired = false,
                IsMaxPerStreamEnabled = false,
                MaxPerStream = null,
                IsMaxPerUserPerStreamEnabled = false,
                MaxPerUserPerStream = null,
                IsGlobalCooldownEnabled = false,
                GlobalCooldownSeconds = null,
                ShouldRedemptionsSkipRequestQueue = false
            });
            
            Color = response.IsNullOrEmpty() ? "red" : "green";
        }
        catch (Exception e) {
            logger.Error(e, "An Exception occured");
        }
        finally {
            // Force the component to be re-rendered
            StateHasChanged();
        }
    }

    public void Action() {
        logger.Warning("AAAAAAAAAAAAAAAAAAAAAA");
    }

}